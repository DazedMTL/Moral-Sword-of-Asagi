#==============================================================================
# @file
# @brief    アプリケーションパッチ
# @anothor  t-sadao
# @since    14/12/26
#
# @date     14/12/26
#             →アクターが死亡しててもバトラーが非表示にならないようにした
#             →アクターの死亡演出をオミットした
# @date     15/02/06
#             →バトル中のビューポート２の表示優先度を上げた
# @date     15/02/05
#             →ピクチャーアニメーションに対応
# @date     15/02/15
#             →ステート顔グラフィック機能を追加
# @date     15/02/26
#             →マップ上でHP,MP,TPの自動回復をオミット
# @date     15/03/01
#             →バトル後にフェードアウト状態のままでマップに復帰する機能を追加
# @date     15/03/10
#             →ゲームバージョンの取得と体験版の判定メソッドを追加
# @date     15/03/26
#             →移動ルートスクリプト用で Game_Eventクラスに move_speed と opacity のセッター（プライベート）を追加
#             →プリセットスクリプトの Game_Interpreter#command_225 メソッドのバグに修正パッチを作成
# @date     15/04/08
#             →Game_CharacterBase#set_graphic に引数（pattern）を追加
# @date     15/04/11
#             →Game_CharacterBase#set_graphic のパッチ内容を Game_Event#set_graphic に変更
#             →Game_Event#set_original_pattern メソッドを追加
# @date     15/04/17
#             →SEの命名規則によるボイス再生に対応
# @date     15/05/1
#             →戦闘不能のメンバーがパーティーの先頭に表示されないように修正
# @date     15/05/13
#             →Game_Player#actor_default_index アクセサーを追加
# @date     15/05/17
#             →ゲームオーバーシーン（Scene_Gameover）でボイスを停止するように修正
# @date     15/05/27
#             →MPダメージリザルトの0クランプをオミット
# @date     15/05/27
#             →Game_Player#move_speed ライターを追加
# @date     15/05/27
#             →Game_Player, Game_Event メソッドが一部privateになってしまったバグを修正
# @date     15/06/13
#             →「拡張反撃」拡張スクリプトの仕様を一部変更修正
# @date     15/06/15
#             →「拡張反撃」拡張スクリプトの不具合修正
# @date     15/06/30
#             →Game_Party#sort_actors! メソッドを追加
# @date     15/07/1
#             →Game_Map#change_parallax_scroll メソッドを追加
# @date     15/07/5
#             →Game_System に遠景の座標を別マップで復元するメソッドを追加
#             →バトル中に戦闘背景の変更が適用されるように修正
# @date     15/07/11
#             →Game_Temp#parallax_fadein_duration アクセサーを追加
# @date     15/07/15
#             →Game_Temp#parallax_fadeout_duration アクセサーを追加
# @date     15/07/16
#             →ダメージ計算式ヘルパー定義用のセクションを追加
# @date     15/07/17
#             →タイトルシーン（Scene_Title）開始時にボイスを停止するように修正
#             →BattleManager.discard_bgm_and_bgs メソッドを追加
# @date     15/07/20
#             →Game_Party#actor_at_top メソッドを追加
# @date     15/07/21
#             →Game_User データを追加
#             →ユーザーデータのセーブルーチンを追加
# @date     15/07/27
#             →BGM / BGS 自動切り替え禁止を追加
# @date     15/08/02
#             →タイトルメニューにシークレットゲームを追加
#             →ニューゲームでユーザーデータを初期化してしまう問題を修正
# @date     15/08/08
#             →ビューアーシーンを追加
# @date     15/08/09
#             →ビューアー機能を修正
# @date     15/08/21
#             →ビューアーカスタムコマンドを追加
#==============================================================================
# @note     ＜ステート顔グラフィックの使用方法＞
#             文章に指定した顔グラフィックを特定の条件（ステート）で差し替えます。
#             1.命名規則に従ったファイル名で "Graphics/Faces" にステート顔グラフィックが適用される顔グラフィックファイルを用意する
#               例1＞Graphics/Faces/$actor001_normal.png
#               例2＞Graphics/Faces/$enemy001_normal.png
#               →ファイル名の先頭に$を付ける
#               →ファイル名の中で actor（もしくは enemy）＋アクターID（もしくは敵キャラID）を含める
#               →例1のファイル名を使用した場合、アクター001番のステートが反映された顔グラフィックに置き換わる
#               →例2のファイル名を使用した場合、敵キャラ001番のステートが反映された顔グラフィックに置き換わる（戦闘中、かつ敵グループに含まれている場合。複数匹いる場合はグループ内でのインデックスが最も若い敵キャラ）
#             2.ステートのメモ欄に顔グラフィックの変更ファイル名を設定（省略可能）
#               例1＞$顔グラフィックのファイル名 = "character_damage"
#               例2＞$顔グラフィックのファイル名 = "?_damage"
#               →例1の場合、顔グラフィックのファイル名が "character_damage.png" に差し替わる
#               →例2の場合、顔グラフィックのファイル名が "actor001_damage.png" に差し替わる（元が "$actor001_normal.png" だった場合）
#             3.ステートのメモ欄に顔グラフィックのインデックスオフセット値を設定（省略可能）
#               例＞$顔グラフィックのオフセット = 5
#               →例の場合、顔グラフィックのインデックスが＋5されたインデックスに差し替わる
# @note     ＜装備進化の使用方法＞
#             装備品を身につけている状態で、アクターのステートによって装備品を変化させることができます。
#             1.装備品（武器、防具）のメモ欄に『タグ』『シリーズ』『レベル』を設定
#               例1＞$タグ     = "装備"
#                  ＞$シリーズ = "アサギ羽織"
#                  ＞$レベル   = 1
#               例2＞$タグ     = "装備"
#                  ＞$シリーズ = "アサギ羽織"
#                  ＞$レベル   = 2
#               →例1の装備品を、同じシリーズでレベルの違う例2に変化させる（置き換える）ことができる
#             2.ステートのメモ欄に『進化』を記述して指定したタグの装備を指定したレベルに変化させる設定をする
#               例1＞$進化 = "装備", 1
#               例2＞$進化 = "装備", 2
#               →例1の場合、"装備"タグの付いた装備品が、同じシリーズのレベル1に変化する
#               →例2の場合、"装備"タグの付いた装備品が、同じシリーズのレベル2に変化する
# @note     ＜バトル後にフェードアウト状態のままでマップに復帰する方法＞
#             戦闘前にスクリプトで以下のコードを実行する。
#             after_battle_fadeout
# @note     ＜ボイスの再生方法＞
#             以下の命名規則でSEとして演奏することでボイスチャンネルで発音させられます。
#             1.ファイル名に "$xxx" を付ける（xxxはボイスチャンネル番号）
#               例1＞$01_talk
#             2.ファイル名に "!" を付けることで発音終了とともに自動再演奏（ボイスのみ）
#               例1＞!$01_talk
#==============================================================================


#==============================================================================
# ■ Ahriman
#------------------------------------------------------------------------------
# 　アーリマン用のネームスペースです。独自拡張機能の設定変更はここを書き換えます。
#==============================================================================

module Ahriman
  #--------------------------------------------------------------------------
  # ● 自己拡張
  #--------------------------------------------------------------------------
  extend self
  #--------------------------------------------------------------------------
  # ● 定数
  #--------------------------------------------------------------------------
  # ゲームバージョン（v0.3なら30、v1.21なら121と記述、４ケタは禁止）
  GAME_VERSION  = 140
  # 体験版の ON/OFF（trueでON, falseでOFF）
  TRIAL_MODE    = false
  # シークレットゲームを判別するためのスイッチID
  SECRET_GAME_SWITCH_ID = 91

  #--------------------------------------------------------------------------
  # ● 開始
  #--------------------------------------------------------------------------
  def startup
    DamageHelper.init
    VoiceController.init
  end
  #--------------------------------------------------------------------------
  # ● 終了
  #--------------------------------------------------------------------------
  def shutdown
  end
  #--------------------------------------------------------------------------
  # ● ゲームバージョンを取得
  #--------------------------------------------------------------------------
  def game_version
    Ahriman::GAME_VERSION
  end
  #--------------------------------------------------------------------------
  # ● 体験版の判定
  #--------------------------------------------------------------------------
  def trial?
    Ahriman::TRIAL_MODE
  end
  #--------------------------------------------------------------------------
  # ● シークレットゲームの設定＆取得
  #--------------------------------------------------------------------------
  def setup_secret_game
    $game_switches[Ahriman::SECRET_GAME_SWITCH_ID] = true
  end
  def secret_game?
    return $game_switches[Ahriman::SECRET_GAME_SWITCH_ID]
  end
end


#==============================================================================
# ■ Ahriman::Damage
#------------------------------------------------------------------------------
# 　ダメージ計算のためのヘルパーモジュールです。RPG::UsableItem::Damage クラス
# の内部で使用されます。
#==============================================================================

module Ahriman::DamageHelper
  #--------------------------------------------------------------------------
  # ● 初期化
  #--------------------------------------------------------------------------
  def self.init
  end
  #--------------------------------------------------------------------------
  # ● 計算実行環境の拘束を取得
  #--------------------------------------------------------------------------
  def self.evaluator_binding(a, b, v)
    Evaluator.new.instance_eval { binding }
  end
end


#==============================================================================
# ■ Ahriman::VoiceController
#------------------------------------------------------------------------------
# 　ボイス制御のためのヘルパーモジュールです。RPG::Voice クラスの内部で使用され
# ます。
#==============================================================================

module Ahriman::VoiceController
  #--------------------------------------------------------------------------
  # ● 初期化
  #--------------------------------------------------------------------------
  def self.init
    clean
  end
  #--------------------------------------------------------------------------
  # ● 全てのボイスチャンネルを初期状態にする
  #--------------------------------------------------------------------------
  def self.clean
    @auto_replays = []
  end
  #--------------------------------------------------------------------------
  # ● ボイスチャンネルを初期状態にする
  #--------------------------------------------------------------------------
  def self.clean_channel(number)
    @auto_replays[number] = nil
  end
  #--------------------------------------------------------------------------
  # ● ボイスが停止したら自動的に再演奏する
  #--------------------------------------------------------------------------
  def self.auto_replay(data, number)
    @auto_replays[number] = data
  end
  #--------------------------------------------------------------------------
  # ● フレーム更新
  #--------------------------------------------------------------------------
  def self.update
    @auto_replays.each_with_index do |voice, number|
      voice.play if voice and not Audio.voice_playing_number?(number)
    end
  end
end


#==============================================================================
# ■ RPG::EquipItem
#------------------------------------------------------------------------------
# 　武器と防具のスーパークラス。
#==============================================================================

class RPG::EquipItem < RPG::BaseItem
  #--------------------------------------------------------------------------
  # ● add  : タグ
  #   ※メモ欄に設定されたタグ名のシンボルを返します。設定されていない場合は -1 を返します。
  #--------------------------------------------------------------------------
  def tag
    return @tag if @tag != nil
    @tag = /\$タグ\s*=\s*"([^"]*)"/ =~ note ? $1.to_sym : -1
  end
  #--------------------------------------------------------------------------
  # ● add  : シリーズ
  #   ※メモ欄に設定されたシリーズ名のシンボルを返します。設定されていない場合は -1 を返します。
  #--------------------------------------------------------------------------
  def series
    return @series if @series != nil
    @series = /\$シリーズ\s*=\s*"([^"]*)"/ =~ note ? $1.to_sym : -1
  end
  #--------------------------------------------------------------------------
  # ● add  : レベル
  #   ※メモ欄に設定されたレベルを返します。設定されていない場合は 1 を返します。
  #--------------------------------------------------------------------------
  def level
    return @level if @level != nil
    @level = /\$レベル\s*=\s*(\d+)/ =~ note ? $1.to_i : 1
  end
end


#==============================================================================
# ■ RPG::State
#------------------------------------------------------------------------------
# 　ステートのデータクラス。
#==============================================================================

class RPG::State < RPG::BaseItem
  #--------------------------------------------------------------------------
  # ● add  : フェイシングされるか判定
  #   ※顔グラフィックのファイル名かオフセットのどちらかが設定されている場合に true を返します。
  #--------------------------------------------------------------------------
  def facing?
    return !face_name.empty? || face_offset != -1
  end
  #--------------------------------------------------------------------------
  # ● add  : 顔グラフィックのファイル名
  #   ※メモ欄に設定されたファイル名を返します。設定されていない場合は空文字列を返します。
  #--------------------------------------------------------------------------
  def face_name
    return @face_name if @face_name != nil
    @face_name = /\$顔グラフィックのファイル名\s*=\s*"([^"]*)"/ =~ note ? $1 : ""
  end
  #--------------------------------------------------------------------------
  # ● add  : 顔グラフィックのオフセット
  #   ※メモ欄に設定されたオフセットを返します。設定されていない場合は -1 を返します。
  #--------------------------------------------------------------------------
  def face_offset
    return @face_offset if @face_offset != nil
    @face_offset = /\$顔グラフィックのオフセット\s*=\s*(\d+)/ =~ note ? $1.to_i : -1
  end
  #--------------------------------------------------------------------------
  # ● add  : このステートにより指定されたタグ付き（アイテム）が進化するレベル
  #   ※メモ欄に進化が設定されている場合に レベル を返します。設定されていない場合は nil を返します。
  #--------------------------------------------------------------------------
  def evolving_level_with_tag(tag)
    return @evolving_levels[tag] if @evolving_levels != nil
    @evolving_levels = {}
    note.scan(/\$進化\s*=\s*"([^"]*)"\s*,\s*(\d+)/) { |a, b| @evolving_levels[a.to_sym] = b.to_i }
    return @evolving_levels[tag]
  end
end


#==============================================================================
# ■ RPG::UsableItem::Damage
#------------------------------------------------------------------------------
# 　ダメージのデータクラス。
#==============================================================================

class RPG::UsableItem::Damage
  #--------------------------------------------------------------------------
  # ● new : 計算式の評価を行います。
  #     a に行動側バトラー、b に対象側バトラー、v にゲーム内変数の配列 ($game_variables) を指定します。
  #     回復の場合は負の値を返します。
  #--------------------------------------------------------------------------
  def eval(a, b, v)
    bg = Ahriman::DamageHelper.evaluator_binding(a, b, v)
    [Kernel.eval(@formula, bg), 0].max * sign rescue 0
  end
end


#==============================================================================
# ■ RPG::SE
#------------------------------------------------------------------------------
# 　SE のデータクラス。Audio モジュールを使って自分自身を演奏する機能を持って
# います。
#==============================================================================

class RPG::SE < RPG::AudioFile
  #--------------------------------------------------------------------------
  # ● override : この SE の演奏を開始します。
  #--------------------------------------------------------------------------
  alias :_ahriman__play :play
  def play
    if voice_number != -1
      Ahriman::VoiceController.clean_channel(voice_number)
      Audio.voice_play('Audio/SE/' + @name, @volume, @pitch, voice_number)
      Ahriman::VoiceController.auto_replay(self, voice_number) if loop_voice?
    else
      _ahriman__play
    end
  end
  #--------------------------------------------------------------------------
  # ● add  : ボイス番号
  #   ※ファイル名に'$xx'で設定された番号を返します。設定されていない場合は -1 を返します。
  #--------------------------------------------------------------------------
  def voice_number
    return @voice_number if @voice_number != nil
    @voice_number = /\$(\d+)/ =~ name ? $1.to_i : -1
  end
  #--------------------------------------------------------------------------
  # ● add  : ループボイス
  #   ※ファイル名に'!'がある場合に true を返します。設定されていない場合は false を返します。
  #--------------------------------------------------------------------------
  def loop_voice?
    return @voice_loop if @voice_loop != nil
    @voice_loop = /!/ =~ name ? true : false
  end
  #--------------------------------------------------------------------------
  # ● override  : SE を停止します。
  #--------------------------------------------------------------------------
  class << self
    alias :_ahriman__stop :stop
    def stop
      _ahriman__stop
      voice_stop
    end
  end
  #--------------------------------------------------------------------------
  # ● add : ボイスを停止します。
  #--------------------------------------------------------------------------
  def self.voice_stop
    Audio.voice_stop
    Ahriman::VoiceController.clean
  end
end


#==============================================================================
# ■ Ahriman::Viewer
#------------------------------------------------------------------------------
# 　ビューアーデータ用のネームスペースです。
#==============================================================================

module Ahriman::Viewer
end


#==============================================================================
# ■ Ahriman::Viewer::Config
#------------------------------------------------------------------------------
# 　ビューアー構成です。
#==============================================================================

class Ahriman::Viewer::Config
  #--------------------------------------------------------------------------
  # ● 定数
  #--------------------------------------------------------------------------
  MENU_COMMAND_RGX = /\s*(?:メニューコマンド)\s*=\s*(\S+)$/i

  WINDOW_X_RGX = /\s*(?:ウィンドウX位置)\s*=\s*(\d+)/i
  WINDOW_Y_RGX = /\s*(?:ウィンドウY位置)\s*=\s*(\d+)/i
  WINDOW_W_RGX = /\s*(?:ウィンドウ横幅)\s*=\s*(\d+)/i
  WINDOW_H_RGX = /\s*(?:ウィンドウ縦幅)\s*=\s*(\d+)/i

  CATEGORY_WINDOW_X_RGX = /\s*(?:カテゴリーウィンドウX位置)\s*=\s*(\d+)/i
  CATEGORY_WINDOW_Y_RGX = /\s*(?:カテゴリーウィンドウY位置)\s*=\s*(\d+)/i
  CATEGORY_WINDOW_W_RGX = /\s*(?:カテゴリーウィンドウ横幅)\s*=\s*(\d+)/i
  CATEGORY_WINDOW_H_RGX = /\s*(?:カテゴリーウィンドウ縦幅)\s*=\s*(\d+)/i

  CUTIN_WINDOW_X_RGX = /\s*(?:カットインウィンドウX位置)\s*=\s*(\d+)/i
  CUTIN_WINDOW_Y_RGX = /\s*(?:カットインウィンドウY位置)\s*=\s*(\d+)/i
  CUTIN_WINDOW_W_RGX = /\s*(?:カットインウィンドウ横幅)\s*=\s*(\d+)/i
  CUTIN_WINDOW_H_RGX = /\s*(?:カットインウィンドウ縦幅)\s*=\s*(\d+)/i
  CUTIN_PICTURE_X_RGX = /\s*(?:カットイン画像X位置)\s*=\s*(\d+)/i
  CUTIN_PICTURE_Y_RGX = /\s*(?:カットイン画像Y位置)\s*=\s*(\d+)/i

  CG_HELP_W_RGX = /\s*(?:CGヘルプ横幅)\s*=\s*(\d+)/i
  CG_HELP_NAME_RGX = /\s*(?:CGヘルプファイル)\s*=\s*(\S+)$/i

  CUSTOM_WINDOW_X_RGX = /\s*(?:カスタムウィンドウX位置)\s*=\s*(\d+)/i
  CUSTOM_WINDOW_Y_RGX = /\s*(?:カスタムウィンドウY位置)\s*=\s*(\d+)/i
  CUSTOM_WINDOW_W_RGX = /\s*(?:カスタムウィンドウ横幅)\s*=\s*(\d+)/i
  CUSTOM_WINDOW_H_RGX = /\s*(?:カスタムウィンドウ縦幅)\s*=\s*(\d+)/i
  CUSTOM_PICTURE_X_RGX = /\s*(?:カスタム画像X位置)\s*=\s*(\d+)/i
  CUSTOM_PICTURE_Y_RGX = /\s*(?:カスタム画像Y位置)\s*=\s*(\d+)/i
  CUSTOM_HELP_X_RGX = /\s*(?:カスタムヘルプX位置)\s*=\s*(\d+)/i
  CUSTOM_HELP_Y_RGX = /\s*(?:カスタムヘルプY位置)\s*=\s*(\d+)/i
  CUSTOM_HELP_W_RGX = /\s*(?:カスタムヘルプ横幅)\s*=\s*(\d+)/i
  CUSTOM_HELP_H_RGX = /\s*(?:カスタムヘルプ縦幅)\s*=\s*(\d+)/i
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_reader   :menu_command             # メニューコマンド
  attr_reader   :basic_window_x           # 基本ウィンドウのX座標
  attr_reader   :basic_window_y           # 基本ウィンドウのY座標
  attr_reader   :basic_window_width       # 基本ウィンドウの横幅（nil ならデフォルト設定）
  attr_reader   :basic_window_height      # 基本ウィンドウの縦幅（nil ならデフォルト設定）
  attr_reader   :category_window_x        # カテゴリーウィンドウのX座標
  attr_reader   :category_window_y        # カテゴリーウィンドウのY座標
  attr_reader   :category_window_width    # カテゴリーウィンドウの横幅（nil ならデフォルト設定）
  attr_reader   :category_window_height   # カテゴリーウィンドウの縦幅（nil ならデフォルト設定）
  attr_reader   :cutin_window_x           # カットインウィンドウのX座標
  attr_reader   :cutin_window_y           # カットインウィンドウのY座標
  attr_reader   :cutin_window_width       # カットインウィンドウの横幅（nil ならデフォルト設定）
  attr_reader   :cutin_window_height      # カットインウィンドウの縦幅（nil ならデフォルト設定）
  attr_reader   :cutin_picture_x          # カットイン画像のX座標（nil ならデフォルト設定）
  attr_reader   :cutin_picture_y          # カットイン画像のY座標（nil ならデフォルト設定）
  attr_reader   :cg_help_name             # CGヘルプのファイル名（nil ならデフォルト設定）
  attr_reader   :cg_help_width            # CGヘルプの横幅（nil ならデフォルト設定）
  attr_reader   :custom_window_x          # カスタムウィンドウのX座標
  attr_reader   :custom_window_y          # カスタムウィンドウのY座標
  attr_reader   :custom_window_width      # カスタムウィンドウの横幅（nil ならデフォルト設定）
  attr_reader   :custom_window_height     # カスタムウィンドウの縦幅（nil ならデフォルト設定）
  attr_reader   :custom_picture_x         # カスタム画像のX座標（nil ならデフォルト設定）
  attr_reader   :custom_picture_y         # カスタム画像のY座標（nil ならデフォルト設定）
  attr_reader   :custom_help_x            # カスタムヘルプのX座標（nil ならデフォルト設定）
  attr_reader   :custom_help_y            # カスタムヘルプのY座標（nil ならデフォルト設定）
  attr_reader   :custom_help_width        # カスタムウィンドウの横幅（nil ならデフォルト設定）
  attr_reader   :custom_help_height       # カスタムウィンドウの縦幅（nil ならデフォルト設定）
  #--------------------------------------------------------------------------
  # ● 初期化
  #--------------------------------------------------------------------------
  def initialize(text)
    @menu_command             = check(text, MENU_COMMAND_RGX, "ビューア")
    @basic_window_x           = check_int(text, WINDOW_X_RGX, 0)
    @basic_window_y           = check_int(text, WINDOW_Y_RGX, 0)
    @basic_window_width       = check_int(text, WINDOW_W_RGX)
    @basic_window_height      = check_int(text, WINDOW_H_RGX)
    @category_window_x        = check_int(text, CATEGORY_WINDOW_X_RGX, @basic_window_x, 0)
    @category_window_y        = check_int(text, CATEGORY_WINDOW_Y_RGX, @basic_window_y, 0)
    @category_window_width    = check_int(text, CATEGORY_WINDOW_W_RGX, @basic_window_width)
    @category_window_height   = check_int(text, CATEGORY_WINDOW_H_RGX, @basic_window_height)
    @cutin_window_x           = check_int(text, CUTIN_WINDOW_X_RGX, @basic_window_x, 0)
    @cutin_window_y           = check_int(text, CUTIN_WINDOW_Y_RGX, @basic_window_y, 0)
    @cutin_window_width       = check_int(text, CUTIN_WINDOW_W_RGX, @basic_window_width)
    @cutin_window_height      = check_int(text, CUTIN_WINDOW_H_RGX, @basic_window_height)
    @cutin_picture_x          = check_int(text, CUTIN_PICTURE_X_RGX)
    @cutin_picture_y          = check_int(text, CUTIN_PICTURE_Y_RGX)
    @cg_help_name             = check(text, CG_HELP_NAME_RGX)
    @cg_help_width            = check_int(text, CG_HELP_W_RGX)
    @custom_window_x          = check_int(text, CUSTOM_WINDOW_X_RGX, @basic_window_x, 0)
    @custom_window_y          = check_int(text, CUSTOM_WINDOW_Y_RGX, @basic_window_y, 0)
    @custom_window_width      = check_int(text, CUSTOM_WINDOW_W_RGX, @basic_window_width)
    @custom_window_height     = check_int(text, CUSTOM_WINDOW_H_RGX, @basic_window_height)
    @custom_picture_x         = check_int(text, CUSTOM_PICTURE_X_RGX)
    @custom_picture_y         = check_int(text, CUSTOM_PICTURE_Y_RGX)
    @custom_help_x            = check_int(text, CUSTOM_HELP_X_RGX)
    @custom_help_y            = check_int(text, CUSTOM_HELP_Y_RGX)
    @custom_help_width        = check_int(text, CUSTOM_HELP_W_RGX)
    @custom_help_height       = check_int(text, CUSTOM_HELP_H_RGX)
  end
  #--------------------------------------------------------------------------
  # ● 正規表現によるチェック
  #--------------------------------------------------------------------------
  def check(text, r, n1 = nil, n2 = nil)
    r != nil && text =~ r ? $1 : (n1 != nil ? n1 : n2)
  end
  #--------------------------------------------------------------------------
  # ● 正規表現による数値チェック
  #--------------------------------------------------------------------------
  def check_int(text, r, n1 = nil, n2 = nil)
    r != nil && text =~ r ? $1.to_i : (n1 != nil ? n1 : n2)
  end
end


#==============================================================================
# ■ Ahriman::Viewer::Item
#------------------------------------------------------------------------------
# 　ビューアーのアイテムのベースクラスです。
#==============================================================================

class Ahriman::Viewer::Item
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_reader   :contents                 # コンテンツ
  attr_reader   :name                     # 名称
  #--------------------------------------------------------------------------
  # ● 初期化
  #--------------------------------------------------------------------------
  def initialize(contents)
    @name = @contents = contents
    @sounds = nil
    if contents =~ /\s*:\s*/
      @name = $`
      @sounds = $'.split(',').each {|e|e.gsub!(/\A\s*|\s*\z/)}.map do |n|
        if n =~ /(.*)\((\d+)\)/
          RPG::SE.new($1,$2.to_i,100)
        else
          RPG::SE.new(n,100,100)
        end
      end
    end
  end
  #--------------------------------------------------------------------------
  # ● SEを再生可能か判定
  #--------------------------------------------------------------------------
  def play_enabled?
    @sounds && @sounds.size > 0
  end
  #--------------------------------------------------------------------------
  # ● SEを再生
  #--------------------------------------------------------------------------
  def play
    @sounds[rand(@sounds.size)].play if play_enabled?
  end
end


#==============================================================================
# ■ Ahriman::Viewer::Category
#------------------------------------------------------------------------------
# 　ビューアーのカテゴリー内容です。
#==============================================================================

class Ahriman::Viewer::Category < Ahriman::Viewer::Item
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_reader   :page_name                # ファイル名
  #--------------------------------------------------------------------------
  # ● 初期化
  #--------------------------------------------------------------------------
  def initialize(contents)
    super
    @page_name = nil
    if @name =~ /\s*=\s*/
      @name = $`
      @page_name = $'
    end
  end
end


#==============================================================================
# ■ Ahriman::Viewer::Cutin
#------------------------------------------------------------------------------
# 　ビューアーのカットイン内容です。
#==============================================================================

class Ahriman::Viewer::Cutin < Ahriman::Viewer::Item
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_reader   :picture_name             # 画像名称
  #--------------------------------------------------------------------------
  # ● 初期化
  #--------------------------------------------------------------------------
  def initialize(contents)
    super
    @picture_name = nil
    if @name =~ /\s*=\s*/
      @name = $`
      @picture_name = $'
    end
  end
end


#==============================================================================
# ■ Ahriman::Viewer::CG
#------------------------------------------------------------------------------
# 　ビューアーのCG内容です。
#==============================================================================

class Ahriman::Viewer::CG < Ahriman::Viewer::Item
  #--------------------------------------------------------------------------
  # ● 画像名称
  #--------------------------------------------------------------------------
  def picture_name
    @name
  end
  #--------------------------------------------------------------------------
  # ● SEを再生
  #--------------------------------------------------------------------------
  def play
    @sounds.each{ |s| s.play } if play_enabled?
  end
end


#==============================================================================
# ■ Ahriman::Viewer::BGM
#------------------------------------------------------------------------------
# 　ビューアーのBGM内容です。
#==============================================================================

class Ahriman::Viewer::BGM < Ahriman::Viewer::Item
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_reader   :bgm                      # 画像名称
  #--------------------------------------------------------------------------
  # ● 初期化
  #--------------------------------------------------------------------------
  def initialize(contents)
    super
    @bgm = RPG::BGM.new
    if @name =~ /\s*=\s*/
      @name = $`
      n = $'
      if n =~ /(.*)\((\d+)\)/
        @bgm = RPG::BGM.new($1,$2.to_i,100)
      else
        @bgm = RPG::BGM.new(n,100,100)
      end
    end
  end
end


#==============================================================================
# ■ Ahriman::Viewer::CustomItem
#------------------------------------------------------------------------------
# 　ビューアーのカスタムアイテム内容です。
#==============================================================================

class Ahriman::Viewer::CustomItem < Ahriman::Viewer::Item
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_reader   :variable_value           # 変数値
  attr_reader   :picture_name             # 画像名称
  attr_reader   :description_name         # 説明ファイル名
  #--------------------------------------------------------------------------
  # ● 初期化
  #--------------------------------------------------------------------------
  def initialize(contents)
    super
    @variable_value = nil
    @picture_name = nil
    @description_name = nil
    if @name =~ /\s*=\s*/
      @name = $`
      c = $'.split(',').each {|e|e.gsub!(/\A\s*|\s*\z/)}
      @variable_value = c[0].to_i
      @picture_name = !(c[1] || "").empty? ? c[1] : nil
      @description_name = !(c[2] || "").empty? ? c[2] : nil
    end
  end
end


#==============================================================================
# ■ Ahriman::Viewer::Page
#------------------------------------------------------------------------------
# 　ビューアーのページ内容です。
#==============================================================================

class Ahriman::Viewer::Page
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_reader   :name                     # ファイル名
  attr_reader   :style                    # スタイル
  attr_reader   :items                    # アイテム配列
  #--------------------------------------------------------------------------
  # ● 初期化
  #--------------------------------------------------------------------------
  def initialize(name, text, style = nil)
    @name = name
    @style = style
    @items = []
    text.each_line do |t|
      item = case @style
      when :category  then  Ahriman::Viewer::Category.new(t.chomp)
      when :cutin     then  Ahriman::Viewer::Cutin.new(t.chomp)
      when :cg        then  Ahriman::Viewer::CG.new(t.chomp)
      when :bgm       then  Ahriman::Viewer::BGM.new(t.chomp)
      when :custom    then  Ahriman::Viewer::CustomItem.new(t.chomp)
      else
        if t.chomp =~ /\s*=\s*/
          @style = $'.downcase.to_sym if $` == "style"
        end
        nil
      end
      @items << item if item
    end
  end
end


#==============================================================================
# ■ Vocab
#------------------------------------------------------------------------------
# 　用語とメッセージを定義するモジュールです。定数でメッセージなどを直接定義す
# るほか、グローバル変数 $data_system から用語データを取得します。
#==============================================================================

module Vocab

  # コマンド
  SecretGame      = "秘密の部屋"

  #--------------------------------------------------------------------------
  def self.secret_game; SecretGame;   end   # シークレットゲーム
  #--------------------------------------------------------------------------
end


#==============================================================================
# ■ Sound
#------------------------------------------------------------------------------
# 　効果音を演奏するモジュールです。グローバル変数 $data_system からデータベー
# スで設定された SE の内容を取得し、演奏します。
#==============================================================================

module Sound

  # チート完了
  CheatFinish     = RPG::SE.new('$01_actor001_action-008', 100, 100)

  #--------------------------------------------------------------------------
  # システム or 直接効果音
  def self.play_system_or_direct_sound(n)
    n.is_a?(RPG::SE) ? n.play : play_system_sound(n)
  end

  # チート完了
  def self.cheat_finish
    play_system_or_direct_sound(CheatFinish)
  end
end


#==============================================================================
# ■ DataManager
#------------------------------------------------------------------------------
# 　データベースとゲームオブジェクトを管理するモジュールです。ゲームで使用する
# ほぼ全てのグローバル変数はこのモジュールで初期化されます。
#==============================================================================

module DataManager
  #--------------------------------------------------------------------------
  # ● override : モジュール初期化
  #--------------------------------------------------------------------------
  class << self
    alias :_ahriman__init :init
    def init
      _ahriman__init
      create_game_user_objects
      load_user if user_file?
    end
  end
  #--------------------------------------------------------------------------
  # ● 各種ゲームオブジェクトの作成
  #--------------------------------------------------------------------------
#~   class << self
#~     alias :_ahriman__create_game_objects :create_game_objects
#~     def create_game_objects
#~       _ahriman__create_game_objects
#~     end
#~   end
  #--------------------------------------------------------------------------
  # ● ゲームユーザーオブジェクトの作成
  #--------------------------------------------------------------------------
  def self.create_game_user_objects
    $game_user          = Game_User.new
  end
  #--------------------------------------------------------------------------
  # ● シークレットゲームのセットアップ
  #--------------------------------------------------------------------------
  def self.setup_secret_game
    setup_new_game
    Ahriman.setup_secret_game
  end
  #--------------------------------------------------------------------------
  # ● add : ユーザーデータを保存するか判定
  #--------------------------------------------------------------------------
  def self.user_save?
    #return false if trial? || $BTEST
    return false if $BTEST
    return true
  end
  #--------------------------------------------------------------------------
  # ● add : ユーザーデータが存在するか判定
  #--------------------------------------------------------------------------
  def self.user_file?
    return false unless user_save?
    return File.file?(user_filename)
  end
  #--------------------------------------------------------------------------
  # ● add : ユーザーファイル名の取得
  #--------------------------------------------------------------------------
  def self.user_filename
    return "User.rvdata2"
  end
  #--------------------------------------------------------------------------
  # ● add : ユーザーデータのセーブの実行
  #--------------------------------------------------------------------------
  def self.save_user
    return false unless user_save?
    save_user_without_rescue
  rescue
    delete_user_file
    false
  end
  #--------------------------------------------------------------------------
  # ● add : ユーザーデータのロードの実行
  #--------------------------------------------------------------------------
  def self.load_user
    load_user_without_rescue
  rescue
    create_game_user_objects
    false
  end
  #--------------------------------------------------------------------------
  # ● ユーザーデータのセーブの実行（例外処理なし）
  #--------------------------------------------------------------------------
  def self.save_user_without_rescue
    File.open(user_filename, "wb") do |file|
      $game_user.on_before_save
      Marshal.dump(make_user_data, file)
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ● ユーザーデータのロードの実行（例外処理なし）
  #--------------------------------------------------------------------------
  def self.load_user_without_rescue
    File.open(user_filename, "rb") do |file|
      extract_user_data(Marshal.load(file))
      convert_user_if_updated
      $game_user.on_after_load
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ● データが更新されている場合はユーザーデータを再生成
  #--------------------------------------------------------------------------
  def self.convert_user_if_updated
    if $game_user.game_version != Ahriman.game_version
      # ここにv***→v***の変換処理を追加する予定
    end
  end
  #--------------------------------------------------------------------------
  # ● add : ユーザーファイルの削除
  #--------------------------------------------------------------------------
  def self.delete_user_file
    File.delete(user_filename) rescue nil
  end
  #--------------------------------------------------------------------------
  # ● ユーザーデータの作成
  #--------------------------------------------------------------------------
  def self.make_user_data
    data = {}
    data[:user]         = $game_user
    data
  end
  #--------------------------------------------------------------------------
  # ● ユーザーデータの展開
  #--------------------------------------------------------------------------
  def self.extract_user_data(data)
    $game_user          = data[:user]
  end
end


#==============================================================================
# ■ SceneManager
#------------------------------------------------------------------------------
# 　シーン遷移を管理するモジュールです。たとえばメインメニューからアイテム画面
# を呼び出し、また戻るというような階層構造を扱うことができます。
#==============================================================================

module SceneManager
  #--------------------------------------------------------------------------
  # ● override : 実行
  #--------------------------------------------------------------------------
  class << self
    alias :_ahriman__run :run
    def run
      Ahriman.startup
      _ahriman__run
      Ahriman.shutdown
    end
  end
end


#==============================================================================
# ■ BattleManager
#------------------------------------------------------------------------------
# 　戦闘の進行を管理するモジュールです。
#==============================================================================

module BattleManager
  #--------------------------------------------------------------------------
  # ● BGM と BGS の保存を破棄
  #--------------------------------------------------------------------------
  def self.discard_bgm_and_bgs
    @map_bgm = RPG::BGM.new
    @map_bgs = RPG::BGS.new
  end
end


#==============================================================================
# ■ Ahriman::ViewerManager
#------------------------------------------------------------------------------
# 　ビューアーを管理するモジュールです。ビューアー用のDSLなどもこのモジュール
# で読み込み（記述）します。
#==============================================================================

module Ahriman::ViewerManager
  #--------------------------------------------------------------------------
  # ● 定数
  #--------------------------------------------------------------------------
  DSL_DIRECTORY = "Documents/Viewer/"               # ビューアー記述用のテキストファイルがあるディレクトリ
  DSL_CONFIG_NAME = "config"              # コンフィグテキストファイル名
  DSL_CATEGORY_NAME = "category"          # カテゴリーテキストファイル名
  #--------------------------------------------------------------------------
  # ● モジュールのインスタンス変数
  #--------------------------------------------------------------------------
  @stxt = {}                              # スタティックテキスト
  @config = nil                           # ビューアー構成
  @pages = Hash.new do |h,k|              # ページ内容
    h[k] = load_page(k)
  end
  @window_selections = Hash.new do |h,k|  # ウィンドウの選択状態
    h[k] = Ahriman::ViewerManager::WindowSelection.new
  end
  @cg_help_text = nil
  #--------------------------------------------------------------------------
  # ● テキストの読み込み
  #--------------------------------------------------------------------------
  def self.load_txt(name)
    return @stxt[name] if @stxt[name]
    path = "#{DSL_DIRECTORY}#{name}.txt"
    return File.open(path, 'r:BOM|UTF-8') { |f| f.read } if FileTest.exist?(path)
    return ""
  end
  #--------------------------------------------------------------------------
  # ● スタティックテキストを追加
  #--------------------------------------------------------------------------
  def self.store_txt(name, text)
    @stxt[name] = text
  end
  #--------------------------------------------------------------------------
  # ● ビューアー構成
  #--------------------------------------------------------------------------
  def self.config
    return @config if @config
    @config = Ahriman::Viewer::Config.new(load_txt(DSL_CONFIG_NAME))
  end
  #--------------------------------------------------------------------------
  # ● ページ内容の読み込み
  #--------------------------------------------------------------------------
  def self.load_page(name)
    Ahriman::Viewer::Page.new(name, load_txt(name))
  end
  #--------------------------------------------------------------------------
  # ● カテゴリーページ内容
  #--------------------------------------------------------------------------
  def self.category_page
    return page(DSL_CATEGORY_NAME) if @pages.has_key?(DSL_CATEGORY_NAME)
    @pages[DSL_CATEGORY_NAME] = Ahriman::Viewer::Page.new(DSL_CATEGORY_NAME, load_txt(DSL_CATEGORY_NAME), :category)
  end
  #--------------------------------------------------------------------------
  # ● カスタムページ内容
  #--------------------------------------------------------------------------
  def self.custom_page(name)
    return page(name) if @pages.has_key?(name)
    @pages[name] = Ahriman::Viewer::Page.new(name, load_txt(name), :custom)
  end
  #--------------------------------------------------------------------------
  # ● カテゴリーページ内容
  #--------------------------------------------------------------------------
  def self.page(name)
    @pages[name]
  end
  #--------------------------------------------------------------------------
  # ● カテゴリーウィンドウの選択状態を取得
  #--------------------------------------------------------------------------
  def self.category_window_selection
    window_selection(DSL_CATEGORY_NAME)
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウの選択状態を取得
  #--------------------------------------------------------------------------
  def self.window_selection(name)
    @window_selections[name]
  end
  #--------------------------------------------------------------------------
  # ● CGヘルプテキスト
  #--------------------------------------------------------------------------
  def self.cg_help_text
    return @cg_help_text if @cg_help_text
    @cg_help_text = load_txt(config.cg_help_name)
  end
end


#==============================================================================
# ■ Ahriman::ViewerManager::WindowSelection
#------------------------------------------------------------------------------
# 　ビューアーの選択状態を保存するクラスです。Ahriman::ViewerManager内で保持さ
# れます。
#==============================================================================

class Ahriman::ViewerManager::WindowSelection
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :last_top_row             # 先頭の行 保存用
  attr_accessor :last_index               # カーソル位置 保存用
  #--------------------------------------------------------------------------
  # ● 初期化
  #--------------------------------------------------------------------------
  def initialize
    @last_top_row = 0
    @last_index = 0
  end
end


#==============================================================================
# ■ Game_Temp
#------------------------------------------------------------------------------
# 　セーブデータに含まれない、一時的なデータを扱うクラスです。このクラスのイン
# スタンスは $game_temp で参照されます。
#==============================================================================

class Game_Temp
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :after_battle_fadeout     # add : 次のバトル後はフェードアウトしたまま
  attr_accessor :parallax_fadein_duration # add : 遠景をフェードインさせるフレーム数
  attr_accessor :parallax_fadeout_duration  # add : 遠景をフェードアウトさせるフレーム数
  #--------------------------------------------------------------------------
  # ● override : オブジェクト初期化
  #--------------------------------------------------------------------------
  alias :_ahriman__initialize :initialize
  def initialize
    _ahriman__initialize
    @after_battle_fadeout = false
    @parallax_fadein_duration = 0
    @parallax_fadeout_duration = 0
  end
end


#==============================================================================
# ■ Game_User
#------------------------------------------------------------------------------
# 　セーブデータとは別に、恒久的なユーザーのプレイデータを保存するクラスです。
# このクラスのインスタンスは $game_user で参照されます。
#==============================================================================

class Game_User
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #   ※なるべくデータベースに依存するデータは追加しない
  #--------------------------------------------------------------------------
  attr_reader   :user_save_count          # 記録セーブ回数
  attr_reader   :game_version             # ゲームのバージョン
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize
    @user_save_count = 0
    @game_version = Ahriman.game_version
    @play_contexts = {}
  end
  #--------------------------------------------------------------------------
  # ● セーブ前の処理
  #--------------------------------------------------------------------------
  def on_before_save
    @user_save_count += 1
    @game_version = Ahriman.game_version
  end
  #--------------------------------------------------------------------------
  # ● ロード後の処理
  #--------------------------------------------------------------------------
  def on_after_load
  end
  #--------------------------------------------------------------------------
  # ● プレイ状況の更新
  #   ※状況が更新された場合は true を返します。すでにコンテキストがある場合は false を返します。
  #--------------------------------------------------------------------------
  def play_context(id)
    return false if @play_contexts[id]
    @play_contexts[id] = true
  end
  #--------------------------------------------------------------------------
  # ● プレイ状況の確認
  #--------------------------------------------------------------------------
  def played_context?(id)
    return @play_contexts[id] || false
  end
end


#==============================================================================
# ■ Game_System
#------------------------------------------------------------------------------
# 　システム周りのデータを扱うクラスです。セーブやメニューの禁止状態などを保存
# します。このクラスのインスタンスは $game_system で参照されます。
#==============================================================================

class Game_System
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :autoplay_disabled        # add : BGM / BGS 自動切り替え禁止
  #--------------------------------------------------------------------------
  # ● override : オブジェクト初期化
  #--------------------------------------------------------------------------
  alias :_ahriman__initialize :initialize
  def initialize
    _ahriman__initialize
    @autoplay_disabled = false
  end
  #--------------------------------------------------------------------------
  # ● add : 遠景座標の保存
  #--------------------------------------------------------------------------
  def save_parallax_pos
    @saved_parallax_x = $game_map.parallax_x
    @saved_parallax_y = $game_map.parallax_y
  end
  #--------------------------------------------------------------------------
  # ● add : 遠景座標の復元
  #--------------------------------------------------------------------------
  def restore_parallax_pos
    $game_map.set_parallax_pos(@saved_parallax_x, @saved_parallax_y) if @saved_parallax_x && @saved_parallax_y
  end
end


#==============================================================================
# ■ Game_Message
#------------------------------------------------------------------------------
# 　文章や選択肢などを表示するメッセージウィンドウの状態を扱うクラスです。この
# クラスのインスタンスは $game_message で参照されます。
#==============================================================================

class Game_Message
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :viewer_custom_page_name  # ビューアーカスタム ページ名
  attr_accessor :viewer_custom_variable_id# ビューアーカスタム 変数 ID
  #--------------------------------------------------------------------------
  # ● override : クリア
  #--------------------------------------------------------------------------
  alias :_ahriman__clear :clear
  def clear
    _ahriman__clear
    @viewer_custom_page_name = nil
    @viewer_custom_variable_id = 0
  end
  #--------------------------------------------------------------------------
  # ● add : ビューアーカスタムモード判定
  #--------------------------------------------------------------------------
  def viewer_custom?
    @viewer_custom_variable_id ||= 0  # ←v130以前のセーブデータとの互換用に初期化
    @viewer_custom_page_name != nil && @viewer_custom_variable_id > 0
  end
  #--------------------------------------------------------------------------
  # ● override : ビジー判定
  #--------------------------------------------------------------------------
  alias :_ahriman__busy? busy?
  def busy?
    _ahriman__busy? || viewer_custom?
  end
end


#==============================================================================
# ■ Game_Picture
#------------------------------------------------------------------------------
# 　ピクチャを扱うクラスです。このクラスは Game_Pictures クラスの内部で、特定
# の番号のピクチャが必要になったときだけ作成されます。
#==============================================================================

class Game_Picture
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :animation_id             # add  : アニメーション ID
  attr_accessor :animation_mirror         # add  : アニメーション 左右反転フラグ
  #--------------------------------------------------------------------------
  # ● override : 基本変数の初期化
  #--------------------------------------------------------------------------
  alias :_ahriman__init_basic :init_basic
  def init_basic
    _ahriman__init_basic
    @animation_id = 0
    @animation_mirror = false
  end
end


#==============================================================================
# ■ Game_ActionResult
#------------------------------------------------------------------------------
# 　戦闘行動の結果を扱うクラスです。このクラスは Game_Battler クラスの内部で
# 使用されます。
#==============================================================================

class Game_ActionResult
  #--------------------------------------------------------------------------
  # ● add  : ダメージの作成
  #--------------------------------------------------------------------------
  alias :_ahriman__make_damage :make_damage
  def make_damage(value, item)
    @critical = false if value == 0
    @hp_damage = value if item.damage.to_hp?
    @mp_damage = value if item.damage.to_mp?
#~     @mp_damage = [@battler.mp, @mp_damage].min
    @hp_drain = @hp_damage if item.damage.drain?
    @mp_drain = @mp_damage if item.damage.drain?
    @hp_drain = [@battler.hp, @hp_drain].min
    @success = true if item.damage.to_hp? || @mp_damage != 0
  end
end


#==============================================================================
# ■ Game_BattlerBase
#------------------------------------------------------------------------------
# 　バトラーを扱う基本のクラスです。主に能力値計算のメソッドを含んでいます。こ
# のクラスは Game_Battler クラスのスーパークラスとして使用されます。
#==============================================================================

class Game_BattlerBase
  #--------------------------------------------------------------------------
  # ● add  : フェイシングされる最初のステートオブジェクトを取得
  #--------------------------------------------------------------------------
  def facing_state
    id = @states.find {|i| $data_states[i].facing? }
    return unless id
    return $data_states[id]
  end
end


#==============================================================================
# ■ Game_Battler
#------------------------------------------------------------------------------
# 　スプライトや行動に関するメソッドを追加したバトラーのクラスです。このクラス
# は Game_Actor クラスと Game_Enemy クラスのスーパークラスとして使用されます。
#==============================================================================

class Game_Battler < Game_BattlerBase
  #--------------------------------------------------------------------------
  # ● override : HP の再生
  #--------------------------------------------------------------------------
  alias :_ahriman__regenerate_hp :regenerate_hp
  def regenerate_hp
    _ahriman__regenerate_hp if $game_party.in_battle
  end
  #--------------------------------------------------------------------------
  # ● override : MP の再生
  #--------------------------------------------------------------------------
  alias :_ahriman__regenerate_mp :regenerate_mp
  def regenerate_mp
    _ahriman__regenerate_mp if $game_party.in_battle
  end
  #--------------------------------------------------------------------------
  # ● override : TP の再生
  #--------------------------------------------------------------------------
  alias :_ahriman__regenerate_tp :regenerate_tp
  def regenerate_tp
    _ahriman__regenerate_tp if $game_party.in_battle
  end
end


#==============================================================================
# ■ Game_Actor
#------------------------------------------------------------------------------
# 　アクターを扱うクラスです。このクラスは Game_Actors クラス（$game_actors）
# の内部で使用され、Game_Party クラス（$game_party）からも参照されます。
#==============================================================================

class Game_Actor < Game_Battler
  #--------------------------------------------------------------------------
  # ● override : リフレッシュ
  #--------------------------------------------------------------------------
  alias :_ahriman__refresh :refresh
  def refresh
    _ahriman__refresh
    # ※ 現在装備中のそれぞれ、ステートで進化が設定されているものを差し替え
    ss = states
    @equips.each_with_index do |item, slot_id|
      equip = item.object
      ss.each do |state|
        if level = state.evolving_level_with_tag(equip.tag)
          if equip.level != level
            datas = case
            when item.is_weapon?  then $data_weapons
            when item.is_armor?   then $data_armors
            end
            # ※ 上書きで前の装備は消滅する仕様（進化 or 退化）
            #    data == nil の場合は装備解除
            data = datas.find { |d| d && d.level == level && d.series == equip.series }
            force_change_equip(slot_id, data)
#~             print "#{name}[#{slot_id}]  \"#{equip.series}\" #{equip.name}(#{equip.level}) -> #{data ? data.name : nil}(#{level})\n"
          end
          break
        end
      end if equip && equip.tag
    end
  end
  #--------------------------------------------------------------------------
  # ● add  : 戦闘不能でも表示するか？
  #--------------------------------------------------------------------------
  def use_corpse?
    return true
  end
  #--------------------------------------------------------------------------
  # ● override : コラプス効果の実行
  #--------------------------------------------------------------------------
  alias :_ahriman__perform_collapse_effect :perform_collapse_effect
  def perform_collapse_effect
    _ahriman__perform_collapse_effect unless use_corpse?
  end
end


#==============================================================================
# ■ Game_Enemy
#------------------------------------------------------------------------------
# 　敵キャラを扱うクラスです。このクラスは Game_Troop クラス（$game_troop）の
# 内部で使用されます。
#==============================================================================

class Game_Enemy < Game_Battler
  #--------------------------------------------------------------------------
  # ● add  : 戦闘不能でも表示するか？
  #--------------------------------------------------------------------------
  def use_corpse?
    return false
  end
  #--------------------------------------------------------------------------
  # ● override : コラプス効果の実行
  #--------------------------------------------------------------------------
  alias :_ahriman__perform_collapse_effect :perform_collapse_effect
  def perform_collapse_effect
    _ahriman__perform_collapse_effect unless use_corpse?
  end
end


#==============================================================================
# ■ Game_Party
#------------------------------------------------------------------------------
# 　パーティを扱うクラスです。所持金やアイテムなどの情報が含まれます。このクラ
# スのインスタンスは $game_party で参照されます。
#==============================================================================

class Game_Party < Game_Unit
  #--------------------------------------------------------------------------
  # ● add : ソートされたメンバーの取得
  #   ※ブロックを指定しない場合はID順にソートされます。
  #--------------------------------------------------------------------------
  def sort_actors
    if block_given?
      @actors.sort { |a, b| yield($game_actors[a], $game_actors[b]) }
    else
      @actors.sort
    end
  end
  #--------------------------------------------------------------------------
  # ● add : （破壊的に）ソートされたメンバーの取得
  #   ※ブロックを指定しない場合はID順にソートされます。
  #--------------------------------------------------------------------------
  def sort_actors!
    if block_given?
      @actors.sort! { |a, b| yield($game_actors[a], $game_actors[b]) }
    else
      @actors.sort!
    end
    $game_player.refresh
    $game_map.need_refresh = true
    @actors.clone
  end
  #--------------------------------------------------------------------------
  # ● add : 特定のアクターを先頭にする
  #--------------------------------------------------------------------------
  def actor_at_top(actor_id)
    sort_actors! { |a, b| a.id == actor_id ? -1 : (b.id == actor_id ? 1 : 0) }
  end
end


#==============================================================================
# ■ Game_Troop
#------------------------------------------------------------------------------
# 　敵グループおよび戦闘に関するデータを扱うクラスです。バトルイベントの処理も
# 行います。このクラスのインスタンスは $game_troop で参照されます。
#==============================================================================

class Game_Troop < Game_Unit
  #--------------------------------------------------------------------------
  # ● add  : 敵キャラの取得
  #--------------------------------------------------------------------------
  def enemy(enemy_id)
    @enemies.find { |e| e.enemy_id == enemy_id }
  end
end


#==============================================================================
# ■ Game_Map
#------------------------------------------------------------------------------
# 　マップを扱うクラスです。スクロールや通行可能判定などの機能を持っています。
# このクラスのインスタンスは $game_map で参照されます。
#==============================================================================

class Game_Map
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_reader   :parallax_x               # add : 遠景 X 座標
  attr_reader   :parallax_y               # add : 遠景 Y 座標
  attr_accessor :battleback1_changed      # add : 戦闘背景（床）が変更されたフラグ
  attr_accessor :battleback2_changed      # add : 戦闘背景（壁）が変更されたフラグ
  #--------------------------------------------------------------------------
  # ● override : 戦闘背景のセットアップ
  #--------------------------------------------------------------------------
  alias :_ahriman__setup_battleback :setup_battleback
  def setup_battleback
    _ahriman__setup_battleback
    @battleback1_changed = false
    @battleback2_changed = false
  end
  #--------------------------------------------------------------------------
  # ● add : 遠景の座標を設定
  #--------------------------------------------------------------------------
  def set_parallax_pos(x, y)
    @parallax_x = x
    @parallax_y = y
  end
  #--------------------------------------------------------------------------
  # ● add : 遠景の自動スクロールの変更
  #--------------------------------------------------------------------------
  def change_parallax_scroll(sx, sy)
    @parallax_sx = sx
    @parallax_sy = sy
  end
  #--------------------------------------------------------------------------
  # ● override : 戦闘背景の変更
  #--------------------------------------------------------------------------
  alias :_ahriman__change_battleback :change_battleback
  def change_battleback(battleback1_name, battleback2_name)
    @battleback1_changed = @battleback1_name != battleback1_name
    @battleback2_changed = @battleback2_name != battleback2_name
    _ahriman__change_battleback(battleback1_name, battleback2_name)
  end
  #--------------------------------------------------------------------------
  # ● new : BGM / BGS 自動切り替え
  #--------------------------------------------------------------------------
  alias :_ahriman__autoplay :autoplay
  def autoplay
    _ahriman__autoplay unless $game_system.autoplay_disabled
  end
end


#==============================================================================
# ■ Game_Player
#------------------------------------------------------------------------------
# 　プレイヤーを扱うクラスです。イベントの起動判定や、マップのスクロールなどの
# 機能を持っています。このクラスのインスタンスは $game_player で参照されます。
#==============================================================================

class Game_Player < Game_Character
  #--------------------------------------------------------------------------
  # ● add : 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_reader   :actor_default_index      # 対応するアクターのデフォルトインデクス
  private
  attr_writer   :move_speed               # 移動速度
  public
  #--------------------------------------------------------------------------
  # ● override : オブジェクト初期化
  #--------------------------------------------------------------------------
  alias :_ahriman__initialize :initialize
  def initialize
    _ahriman__initialize
    @actor_default_index = 0
  end
  #--------------------------------------------------------------------------
  # ● add   : 対応するアクターのデフォルトインデクスを設定
  #--------------------------------------------------------------------------
  def actor_default_index=(i)
    @actor_default_index = i
    refresh
    @actor_default_index
  end
  #--------------------------------------------------------------------------
  # ● new   : 対応するアクターの取得
  #--------------------------------------------------------------------------
  alias :_ahriman__actor :actor
  def actor
    @actor_default_index = 0 if @actor_default_index.nil? # 旧セーブデータ対策
    m = $game_party.battle_members
    if @actor_default_index != 0
      m = m.slice(@actor_default_index, m.size - 1) + m.slice(0, @actor_default_index)
    end
    return m.find(lambda{ m[0] }) { |a| !a.death_state? }
  end
end


#==============================================================================
# ■ Game_Event
#------------------------------------------------------------------------------
# 　イベントを扱うクラスです。条件判定によるイベントページ切り替えや、並列処理
# イベント実行などの機能を持っており、Game_Map クラスの内部で使用されます。
#==============================================================================

class Game_Event < Game_Character
  #--------------------------------------------------------------------------
  # ● add : 公開インスタンス変数
  #--------------------------------------------------------------------------
  private
  attr_writer   :move_speed               # 移動速度
  attr_writer   :opacity                  # 不透明度
  public
  #--------------------------------------------------------------------------
  # ● override  : グラフィックの変更
  #     character_name  : 新しい歩行グラフィック ファイル名
  #     character_index : 新しい歩行グラフィック インデックス
  #--------------------------------------------------------------------------
#~   alias :_ahriman__set_graphic :set_graphic
#~   def set_graphic(character_name, character_index, pattern = nil)
#~     _ahriman__set_graphic(character_name, character_index)
#~     set_original_pattern(pattern) if pattern
#~   end
  #--------------------------------------------------------------------------
  # ● add : オリジナルパターンの設定
  #--------------------------------------------------------------------------
  def set_original_pattern(pattern)
    @original_pattern = pattern
    straighten
    @pattern = @original_pattern
  end
end


#==============================================================================
# ■ Game_Interpreter
#------------------------------------------------------------------------------
# 　イベントコマンドを実行するインタプリタです。このクラスは Game_Map クラス、
# Game_Troop クラス、Game_Event クラスの内部で使用されます。
#==============================================================================

class Game_Interpreter
  #--------------------------------------------------------------------------
  # ● add  : インクルード
  #--------------------------------------------------------------------------
  include Ahriman
  #--------------------------------------------------------------------------
  # ● add  : 戦闘後、フェードアウト状態のままマップに復帰する
  #--------------------------------------------------------------------------
  def after_battle_fadeout
    $game_temp.after_battle_fadeout = true
  end
  #--------------------------------------------------------------------------
  # ● add  : ピクチャーアニメーション
  #--------------------------------------------------------------------------
  def animate_picture(index, animation_id, mirror = false)
    picture = screen.pictures[index]
    if picture
      picture.animation_id = animation_id
      picture.animation_mirror = mirror
    end
  end
  #--------------------------------------------------------------------------
  # ● add  : 反転したピクチャーアニメーション
  #--------------------------------------------------------------------------
  def animate_picture_mirror(index, animation_id)
    animate_picture(index, animation_id, true)
  end
  #--------------------------------------------------------------------------
  # ● add  : ビューアーカスタムを起動
  #--------------------------------------------------------------------------
  def viewer_custom(name, variable_id)
    wait_for_message
    $game_message.viewer_custom_page_name = name
    $game_message.viewer_custom_variable_id = variable_id
    wait_for_message
  end
  #--------------------------------------------------------------------------
  # ● new  : 画面のシェイク
  #--------------------------------------------------------------------------
  alias :_ahriman__command_225 :command_225
  def command_225
    screen.start_shake(@params[0], @params[1], @params[2])
    wait(@params[2]) if @params[3]
  end
end


#==============================================================================
# ■ Sprite_Battler
#------------------------------------------------------------------------------
# 　バトラー表示用のスプライトです。Game_Battler クラスのインスタンスを監視し、
# スプライトの状態を自動的に変化させます。
#==============================================================================

class Sprite_Battler < Sprite_Base
  #--------------------------------------------------------------------------
  # ● new  : 可視状態の初期化
  #   ※オリジナルソースコードに @battler.use_corpse? の判定を追加
  #--------------------------------------------------------------------------
  alias :_ahriman__init_visibility :init_visibility
  def init_visibility
    @battler_visible = @battler.alive? || @battler.use_corpse?
    self.opacity = 0 unless @battler_visible
  end
end


#==============================================================================
# ■ add : Sprite_AnimationPicture
#------------------------------------------------------------------------------
# 　アニメーションを使用できるピクチャ表示用のスプライトです。Game_Picture クラ
# スのインスタンスを監視し、スプライトの状態を自動的に変化させます。
#==============================================================================

class Sprite_AnimationPicture < Sprite_Base
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #     picture : Game_Picture
  #--------------------------------------------------------------------------
  def initialize(viewport, picture)
    super(viewport)
    @picture = picture
    update
  end
  #--------------------------------------------------------------------------
  # ● 解放
  #--------------------------------------------------------------------------
  def dispose
    end_animation
    bitmap.dispose if bitmap
    super
  end
  #--------------------------------------------------------------------------
  # ● フレーム更新
  #--------------------------------------------------------------------------
  def update
    super
    update_bitmap
    update_origin
    update_position
    update_zoom
    update_other
    setup_new_effect
  end
  #--------------------------------------------------------------------------
  # ● 転送元ビットマップの更新
  #--------------------------------------------------------------------------
  def update_bitmap
    if @picture.name.empty?
      self.bitmap = nil
    else
      self.bitmap = Cache.picture(@picture.name)
    end
  end
  #--------------------------------------------------------------------------
  # ● 原点の更新
  #--------------------------------------------------------------------------
  def update_origin
    if @picture.origin == 0
      self.ox = 0
      self.oy = 0
    elsif bitmap
      self.ox = bitmap.width / 2
      self.oy = bitmap.height / 2
    end
  end
  #--------------------------------------------------------------------------
  # ● 位置の更新
  #--------------------------------------------------------------------------
  def update_position
    self.x = @picture.x
    self.y = @picture.y
    self.z = @picture.number
  end
  #--------------------------------------------------------------------------
  # ● 拡大率の更新
  #--------------------------------------------------------------------------
  def update_zoom
    self.zoom_x = @picture.zoom_x / 100.0
    self.zoom_y = @picture.zoom_y / 100.0
  end
  #--------------------------------------------------------------------------
  # ● その他の更新
  #--------------------------------------------------------------------------
  def update_other
    self.opacity = @picture.opacity
    self.blend_type = @picture.blend_type
    self.angle = @picture.angle
    self.tone.set(@picture.tone)
  end
  #--------------------------------------------------------------------------
  # ● 新しいエフェクトの設定
  #--------------------------------------------------------------------------
  def setup_new_effect
    if @picture.animation_id > 0
      animation = $data_animations[@picture.animation_id]
      mirror = @picture.animation_mirror
      start_animation(animation, mirror)
      @picture.animation_id = 0
    end
  end
  #--------------------------------------------------------------------------
  # ● アニメーションの終了
  #--------------------------------------------------------------------------
  def end_animation
    super
    @picture.animation_id = 0
  end
end


#==============================================================================
# ■ Spriteset_Map
#------------------------------------------------------------------------------
# 　マップ画面のスプライトやタイルマップなどをまとめたクラスです。このクラスは
# Scene_Map クラスの内部で使用されます。
#==============================================================================

class Spriteset_Map
  #--------------------------------------------------------------------------
  # ● override  : 遠景の作成
  #--------------------------------------------------------------------------
  alias :_ahriman__create_parallax :create_parallax
  def create_parallax
    _ahriman__create_parallax
    @parallax_fadein_duration = 0
    @parallax_fadeout_duration = 0
  end
  #--------------------------------------------------------------------------
  # ● override  : 遠景の更新
  #--------------------------------------------------------------------------
  alias :_ahriman__update_parallax :update_parallax
  def update_parallax
    if $game_temp.parallax_fadein_duration > 0
      @parallax.opacity = 0
      @parallax_fadein_duration = $game_temp.parallax_fadein_duration
      $game_temp.parallax_fadein_duration = 0
      $game_temp.parallax_fadeout_duration = 0
    elsif $game_temp.parallax_fadeout_duration > 0
      @parallax.opacity = 255
      @parallax_fadeout_duration = $game_temp.parallax_fadeout_duration
      $game_temp.parallax_fadeout_duration = 0
      $game_temp.parallax_fadein_duration = 0
    end
    if @parallax_fadein_duration > 0 or @parallax_fadeout_duration > 0
      if @parallax_fadein_duration > 0
        d = @parallax_fadein_duration
        t = 255
        @parallax_fadein_duration -= 1
      else
        d = @parallax_fadeout_duration
        t = 0
        @parallax_fadeout_duration -= 1
      end
      @parallax.opacity = (@parallax.opacity * (d - 1) + t) / d
    end
    _ahriman__update_parallax
  end
  #--------------------------------------------------------------------------
  # ● new  : ピクチャスプライトの更新
  #--------------------------------------------------------------------------
  alias :_ahriman__update_pictures :update_pictures
  def update_pictures
    $game_map.screen.pictures.each do |pic|
      @picture_sprites[pic.number] ||= Sprite_AnimationPicture.new(@viewport2, pic)
      @picture_sprites[pic.number].update
    end
  end
end


#==============================================================================
# ■ Spriteset_Battle
#------------------------------------------------------------------------------
# 　バトル画面のスプライトをまとめたクラスです。このクラスは Scene_Battle クラ
# スの内部で使用されます。
#==============================================================================

class Spriteset_Battle
  #--------------------------------------------------------------------------
  # ● override  : ビューポートの作成
  #--------------------------------------------------------------------------
  alias :_ahriman__create_viewports :create_viewports
  def create_viewports
    _ahriman__create_viewports
    @viewport2.z = 110
#~     @viewport3.z = 100
  end
  #--------------------------------------------------------------------------
  # ● add : 戦闘背景（床）スプライトの再作成
  #--------------------------------------------------------------------------
  def recreate_battleback1
    @back1_sprite.bitmap.dispose
    @back1_sprite.bitmap = battleback1_bitmap
    center_sprite(@back1_sprite)
  end
  #--------------------------------------------------------------------------
  # ● add : 戦闘背景（壁）スプライトの再作成
  #--------------------------------------------------------------------------
  def recreate_battleback2
    @back2_sprite.bitmap.dispose
    @back2_sprite.bitmap = battleback2_bitmap
    center_sprite(@back2_sprite)
  end
  #--------------------------------------------------------------------------
  # ● override  : 戦闘背景（床）スプライトの更新
  #--------------------------------------------------------------------------
  alias :_ahriman__update_battleback1 :update_battleback1
  def update_battleback1
    if $game_map.battleback1_changed
      recreate_battleback1
      $game_map.battleback1_changed = false
    end
    _ahriman__update_battleback1
  end
  #--------------------------------------------------------------------------
  # ● override  : 戦闘背景（壁）スプライトの更新
  #--------------------------------------------------------------------------
  alias :_ahriman__update_battleback2 :update_battleback2
  def update_battleback2
    if $game_map.battleback2_changed
      recreate_battleback2
      $game_map.battleback2_changed = false
    end
    _ahriman__update_battleback2
  end
  #--------------------------------------------------------------------------
  # ● new  : ピクチャスプライトの更新
  #--------------------------------------------------------------------------
  alias :_ahriman__update_pictures :update_pictures
  def update_pictures
    $game_troop.screen.pictures.each do |pic|
      @picture_sprites[pic.number] ||= Sprite_AnimationPicture.new(@viewport2, pic)
      @picture_sprites[pic.number].update
    end
  end
end


#==============================================================================
# ■ Ahriman::Spriteset_Viewer
#------------------------------------------------------------------------------
# 　ビューアー画面のスプライトをまとめたクラスです。このクラスは Scene_Viewer
# クラスの内部で使用されます。
#==============================================================================

class Ahriman::Spriteset_Viewer
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :cutin_basic_x            # カットインの基本X座標
  attr_accessor :item_proc                # 表示アイテム用コールバック
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize
    init_info
    create_viewports
    create_cutin
    create_cg
  end
  #--------------------------------------------------------------------------
  # ● ビューアー構成
  #--------------------------------------------------------------------------
  def config
    Ahriman::ViewerManager.config
  end
  #--------------------------------------------------------------------------
  # ● 情報の初期化
  #--------------------------------------------------------------------------
  def init_info
    @cutin_basic_x = 0
    @item_proc = Proc.new {}
  end
  #--------------------------------------------------------------------------
  # ● ビューポートの作成
  #--------------------------------------------------------------------------
  def create_viewports
    @viewport   = Viewport.new
  end
  #--------------------------------------------------------------------------
  # ● カットインの作成
  #--------------------------------------------------------------------------
  def create_cutin
    @cutin_sprite = Sprite.new(@viewport)
  end
  #--------------------------------------------------------------------------
  # ● CGの作成
  #--------------------------------------------------------------------------
  def create_cg
    @cg_sprite = Sprite.new(@viewport)
  end
  #--------------------------------------------------------------------------
  # ● 解放
  #--------------------------------------------------------------------------
  def dispose
    dispose_cutin
    dispose_cg
    dispose_viewports
  end
  #--------------------------------------------------------------------------
  # ● カットインの解放
  #--------------------------------------------------------------------------
  def dispose_cutin
#~    @cutin_sprite.bitmap.dispose
    @cutin_sprite.dispose
  end
  #--------------------------------------------------------------------------
  # ● CGの解放
  #--------------------------------------------------------------------------
  def dispose_cg
#~    @cg_sprite.bitmap.dispose
    @cg_sprite.dispose
  end
  #--------------------------------------------------------------------------
  # ● ビューポートの解放
  #--------------------------------------------------------------------------
  def dispose_viewports
    @viewport.dispose
  end
  #--------------------------------------------------------------------------
  # ● フレーム更新
  #--------------------------------------------------------------------------
  def update
    update_info
    update_cutin
    update_cg
    update_viewports
  end
  #--------------------------------------------------------------------------
  # ● 情報の更新
  #--------------------------------------------------------------------------
  def update_info
    item = item_proc.call
    @item = item if item
  end
  #--------------------------------------------------------------------------
  # ● カットインの更新
  #--------------------------------------------------------------------------
  def update_cutin
    if @item.is_a?(Ahriman::Viewer::Cutin) and not @item.picture_name.empty?
      @cutin_sprite.x = config.cutin_picture_x ? config.cutin_picture_x : @cutin_basic_x
      @cutin_sprite.y = config.cutin_picture_y ? config.cutin_picture_y : 0
      @cutin_sprite.visible = true
      @cutin_sprite.bitmap = Cache.picture(@item.picture_name)
    else
      @cutin_sprite.visible = false
    end
  end
  #--------------------------------------------------------------------------
  # ● CGの更新
  #--------------------------------------------------------------------------
  def update_cg
    if @item.is_a?(Ahriman::Viewer::CG) and not @item.picture_name.empty?
      @cg_sprite.visible = true
      @cg_sprite.bitmap = Cache.picture(@item.picture_name)
    else
      @cg_sprite.visible = false
    end
  end
  #--------------------------------------------------------------------------
  # ● ビューポートの更新
  #--------------------------------------------------------------------------
  def update_viewports
    @viewport.update
  end
end


#==============================================================================
# ■ Window_Base
#------------------------------------------------------------------------------
# 　ゲーム中の全てのウィンドウのスーパークラスです。
#==============================================================================

class Window_Base < Window
  #--------------------------------------------------------------------------
  # ● override : 顔グラフィックの描画
  #     enabled : 有効フラグ。false のとき半透明で描画
  #--------------------------------------------------------------------------
  alias :_ahriman__draw_face :draw_face
  def draw_face(face_name, face_index, x, y, enabled = true)
    sign = face_name[/^[\!\$]{0,2}/]
    if sign && sign.include?('$')
      if /(actor|enemy)(\d+)/i =~ face_name
        battler = case $1
        when "actor" then $game_actors[$2.to_i]
        when "enemy" then $game_troop.enemy($2.to_i)
        end
        state = battler.facing_state
        if state
          face_name = state.face_name.gsub('?', $&) unless state.face_name.empty?
          face_index = state.face_offset + face_index if state.face_offset != -1
        end
      end
    end
    _ahriman__draw_face(face_name, face_index, x, y, enabled)
  end
end


#==============================================================================
# ■ Window_MenuCommand
#------------------------------------------------------------------------------
# 　メニュー画面で表示するコマンドウィンドウです。
#==============================================================================

class Window_MenuCommand < Window_Command
  #--------------------------------------------------------------------------
  # ● override : 独自コマンドの追加用
  #--------------------------------------------------------------------------
  alias :_ahriman__add_original_commands :add_original_commands
  def add_original_commands
    _ahriman__add_original_commands
    add_command(Ahriman::ViewerManager.config.menu_command, :viewer, viewer_enabled) if $game_user.played_context?(:gameclear1) && !Ahriman.trial?
  end
  #--------------------------------------------------------------------------
  # ● add  : 主要コマンドの有効状態を取得
  #--------------------------------------------------------------------------
  def viewer_enabled
    true
  end
end


#==============================================================================
# ■ Window_Message
#------------------------------------------------------------------------------
# 　文章表示に使うメッセージウィンドウです。
#==============================================================================

class Window_Message < Window_Base
  #--------------------------------------------------------------------------
  # ● new : ファイバーの更新
  #--------------------------------------------------------------------------
  def update_fiber
    if @fiber
      @fiber.resume
    elsif fiber_executed?
      @fiber = Fiber.new { fiber_main }
      @fiber.resume
    else
      $game_message.visible = false
    end
  end
  #--------------------------------------------------------------------------
  # ● add : ファイバーの実行可能を判定
  #--------------------------------------------------------------------------
  def fiber_executed?
    $game_message.busy? && !$game_message.scroll_mode && !$game_message.viewer_custom?
  end
end


#==============================================================================
# ■ Window_TitleCommand
#------------------------------------------------------------------------------
# 　タイトル画面で、ニューゲーム／コンティニューを選択するウィンドウです。
#==============================================================================

class Window_TitleCommand < Window_Command
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :cheat_enabled            # チートを有効
  #--------------------------------------------------------------------------
  # ● override  : オブジェクト初期化
  #--------------------------------------------------------------------------
  alias :_ahriman__initialize :initialize
  def initialize
    _ahriman__initialize
    @cheat_enabled = false
  end
  #--------------------------------------------------------------------------
  # ● new : コマンドリストの作成
  #--------------------------------------------------------------------------
  def make_command_list
    add_command(Vocab::new_game, :new_game)
    add_command(Vocab::continue, :continue, continue_enabled)
    add_command(Vocab::secret_game, :secret_game) if secret_game_showed?
    add_command(Vocab::shutdown, :shutdown)
  end
  #--------------------------------------------------------------------------
  # ● add : シークレットゲームを表示可能か判別
  #--------------------------------------------------------------------------
  def secret_game_showed?
    ($game_user.played_context? :gameclear1 or @cheat_enabled) and not Ahriman.trial?
  end
end


#==============================================================================
# ■ Ahriman::Window_ViewerBase
#------------------------------------------------------------------------------
# 　ビューアー画面で、コンテンツを表示するウィンドウのベースクラスです。
#==============================================================================

class Ahriman::Window_ViewerBase < Window_Selectable
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize
    super(window_x, window_y, window_width, window_height)
    self.openness = 0
    deactivate
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウX座標の取得
  #--------------------------------------------------------------------------
  def window_x
    config.basic_window_x
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウY座標の取得
  #--------------------------------------------------------------------------
  def window_y
    config.basic_window_y
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウ幅の取得
  #--------------------------------------------------------------------------
  def window_width
    default_window_width_or(config.basic_window_width)
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウ高さの取得
  #--------------------------------------------------------------------------
  def window_height
    default_window_height_or(config.basic_window_height)
  end
  #--------------------------------------------------------------------------
  # ● 指定したウィンドウ幅がnilならデフォルトのウィンドウ幅を返す
  #--------------------------------------------------------------------------
  def default_window_width_or(width)
    return width ? width : 267
  end
  #--------------------------------------------------------------------------
  # ● 指定したウィンドウ高さがnilならデフォルトのウィンドウ高さを返す
  #--------------------------------------------------------------------------
  def default_window_height_or(height)
    return height ? height : Graphics.height
  end
  #--------------------------------------------------------------------------
  # ● 選択状態を保存
  #--------------------------------------------------------------------------
  def save_selection
    selection.last_top_row = top_row
    selection.last_index = index
  end
  #--------------------------------------------------------------------------
  # ● 選択状態を復元
  #--------------------------------------------------------------------------
  def restore_selection
    self.top_row = selection.last_top_row
    select(selection.last_index)
  end
  #--------------------------------------------------------------------------
  # ● 処理の開始
  #--------------------------------------------------------------------------
  def start
    refresh
    restore_selection
    open
    activate
  end
  #--------------------------------------------------------------------------
  # ● ビューアー構成
  #--------------------------------------------------------------------------
  def config
    Ahriman::ViewerManager.config
  end
  #--------------------------------------------------------------------------
  # ● カテゴリーページ
  #--------------------------------------------------------------------------
  def page
    # （サブクラスで実装）
  end
  #--------------------------------------------------------------------------
  # ● カテゴリー選択状態
  #--------------------------------------------------------------------------
  def selection
    # （サブクラスで実装）
  end
  #--------------------------------------------------------------------------
  # ● ページの取得
  #--------------------------------------------------------------------------
  def get_page(name)
    Ahriman::ViewerManager.page(name)
  end
  #--------------------------------------------------------------------------
  # ● 選択状態の取得
  #--------------------------------------------------------------------------
  def get_selection(name)
    Ahriman::ViewerManager.window_selection(name)
  end
  #--------------------------------------------------------------------------
  # ● 項目数の取得
  #--------------------------------------------------------------------------
  def item_max
    page.items.size
  end
  #--------------------------------------------------------------------------
  # ● 選択項目の取得
  #   ※ブロックを指定した場合、項目が存在すれば項目を引数にブロックを実行して戻り値を返します。
  #--------------------------------------------------------------------------
  def current_item
    item = index != -1 ? page.items[index] : nil
    if block_given?
      return yield(item) if item
    else
      item
    end
  end
  #--------------------------------------------------------------------------
  # ● リフレッシュ
  #--------------------------------------------------------------------------
  def refresh
    create_contents
    draw_all_items
  end
  #--------------------------------------------------------------------------
  # ● 項目の描画
  #--------------------------------------------------------------------------
  def draw_item(index)
    draw_text(item_rect_for_text(index), page.items[index].name)
  end
  #--------------------------------------------------------------------------
  # ● キャンセルボタンが押されたときの処理
  #--------------------------------------------------------------------------
  def process_cancel
    super
    save_selection
    close
  end
  #--------------------------------------------------------------------------
  # ● 決定音の再生
  #--------------------------------------------------------------------------
  def play_ok
    Sound.play_ok unless current_item { |i| i.play; i.play_enabled? }
  end
  #--------------------------------------------------------------------------
  # ● ブザー音の再生
  #--------------------------------------------------------------------------
  def play_buzzer
#~     Sound.play_buzzer unless current_item { |i| i.play; i.play_enabled? }
     current_item { |i| i.play }
  end
  #--------------------------------------------------------------------------
  # ● 決定処理の有効状態を取得
  #--------------------------------------------------------------------------
  def ok_enabled?
    return true
  end
  #--------------------------------------------------------------------------
  # ● 決定ボタンが押されたときの処理
  #--------------------------------------------------------------------------
  def process_ok
    if current_item_enabled?
      play_ok
      Input.update
      deactivate
      close
      call_ok_handler
      save_selection
    else
      play_buzzer
    end
  end
end


#==============================================================================
# ■ Ahriman::Window_ViewerCategory
#------------------------------------------------------------------------------
# 　ビューアー画面で、コンテンツのカテゴリーを表示するウィンドウです。
#==============================================================================

class Ahriman::Window_ViewerCategory < Ahriman::Window_ViewerBase
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize
    super
    refresh
    restore_selection
    self.openness = 255
    activate
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウX座標の取得
  #--------------------------------------------------------------------------
  def window_x
    config.category_window_x
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウY座標の取得
  #--------------------------------------------------------------------------
  def window_y
    config.category_window_y
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウ幅の取得
  #--------------------------------------------------------------------------
  def window_width
    default_window_width_or(config.category_window_width)
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウ高さの取得
  #--------------------------------------------------------------------------
  def window_height
    default_window_height_or(config.category_window_height)
  end
  #--------------------------------------------------------------------------
  # ● カテゴリーページ
  #--------------------------------------------------------------------------
  def page
    Ahriman::ViewerManager.category_page
  end
  #--------------------------------------------------------------------------
  # ● カテゴリー選択状態
  #--------------------------------------------------------------------------
  def selection
    Ahriman::ViewerManager.category_window_selection
  end
  #--------------------------------------------------------------------------
  # ● 選択項目のファイル名を取得
  #--------------------------------------------------------------------------
  def current_page_name
    current_item { |i| i.page_name }
  end
  #--------------------------------------------------------------------------
  # ● 選択項目のスタイルを取得
  #--------------------------------------------------------------------------
  def current_style
    current_item { |i| get_page(i.page_name).style }
  end
  #--------------------------------------------------------------------------
  # ● 表示するアイテム
  #--------------------------------------------------------------------------
  def view_item
    current_item { |i| get_page(i.page_name).items[get_selection(i.page_name).last_index] }
  end
  #--------------------------------------------------------------------------
  # ● 選択項目のシンボルを取得
  #--------------------------------------------------------------------------
  def current_symbol
    current_style
  end
  #--------------------------------------------------------------------------
  # ● 決定ハンドラの呼び出し
  #--------------------------------------------------------------------------
  def call_ok_handler
    if handle?(current_symbol)
      call_handler(current_symbol)
    else
      super
    end
  end
  #--------------------------------------------------------------------------
  # ● 選択項目の有効状態を取得
  #--------------------------------------------------------------------------
  def current_item_enabled?
    return current_style != nil
  end
end


#==============================================================================
# ■ Ahriman::Window_ViewerContents
#------------------------------------------------------------------------------
# 　ビューアー画面で、コンテンツを表示するウィンドウのベースクラスです。
#==============================================================================

class Ahriman::Window_ViewerContents < Ahriman::Window_ViewerBase
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :page_name_proc           # ページ名用のコールバック
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize
    super
    self.page_name_proc = Proc.new { "" }
  end
  #--------------------------------------------------------------------------
  # ● 処理の開始
  #--------------------------------------------------------------------------
  def start
    update_page
    super
  end
  #--------------------------------------------------------------------------
  # ● override : ページ名用のコールバックを設定
  #--------------------------------------------------------------------------
  alias :_ahriman__page_name_proc= :page_name_proc=
  def page_name_proc=(p)
    self._ahriman__page_name_proc = p
  ensure
    update_page
  end
  #--------------------------------------------------------------------------
  # ● ページを更新
  #--------------------------------------------------------------------------
  def update_page
    @page_name = @page_name_proc.call
  end
  #--------------------------------------------------------------------------
  # ● カテゴリーページ
  #--------------------------------------------------------------------------
  def page
    get_page(@page_name)
  end
  #--------------------------------------------------------------------------
  # ● カテゴリー選択状態
  #--------------------------------------------------------------------------
  def selection
    get_selection(@page_name)
  end
  #--------------------------------------------------------------------------
  # ● 選択項目の有効状態を取得
  #--------------------------------------------------------------------------
  def current_item_enabled?
    return false
  end
end


#==============================================================================
# ■ Ahriman::Window_ViewerCutin
#------------------------------------------------------------------------------
# 　ビューアー画面で、カットインを表示するウィンドウです。
#==============================================================================

class Ahriman::Window_ViewerCutin < Ahriman::Window_ViewerContents
  #--------------------------------------------------------------------------
  # ● ウィンドウX座標の取得
  #--------------------------------------------------------------------------
  def window_x
    config.cutin_window_x
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウY座標の取得
  #--------------------------------------------------------------------------
  def window_y
    config.cutin_window_y
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウ幅の取得
  #--------------------------------------------------------------------------
  def window_width
    default_window_width_or(config.cutin_window_width)
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウ高さの取得
  #--------------------------------------------------------------------------
  def window_height
    default_window_height_or(config.cutin_window_height)
  end
end


#==============================================================================
# ■ Ahriman::Window_ViewerCG
#------------------------------------------------------------------------------
# 　ビューアー画面で、CGを表示するウィンドウです。
#==============================================================================

class Ahriman::Window_ViewerCG < Ahriman::Window_ViewerContents
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize
    super
    hide
  end
end


#==============================================================================
# ■ Ahriman::Window_ViewerBGM
#------------------------------------------------------------------------------
# 　ビューアー画面で、BGMを選択するウィンドウです。
#==============================================================================

class Ahriman::Window_ViewerBGM < Ahriman::Window_ViewerContents
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :pre_bgm_proc             # BGM再生の直前に呼び出されるコールバック
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize
    super
    @pre_bgm_proc = Proc.new {}
  end
  #--------------------------------------------------------------------------
  # ● 決定音の再生
  #--------------------------------------------------------------------------
  def play_ok
    @pre_bgm_proc.call
    current_item do |i|
      i.play
      i.bgm.play
    end
  end
  #--------------------------------------------------------------------------
  # ● ブザー音の再生
  #--------------------------------------------------------------------------
  def play_buzzer
    @pre_bgm_proc.call
    current_item do |i|
      i.play
      i.bgm.play
    end
  end
end


#==============================================================================
# ■ Ahriman::Window_ViewerCustom
#------------------------------------------------------------------------------
# 　カスタムビューアーを表示するウィンドウです。
#==============================================================================

class Ahriman::Window_ViewerCustom < Ahriman::Window_ViewerBase
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize
    super
    set_handler(:ok,     method(:on_ok))
    set_handler(:cancel, method(:on_cancel))
    create_help_window
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウX座標の取得
  #--------------------------------------------------------------------------
  def window_x
    config.custom_window_x
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウY座標の取得
  #--------------------------------------------------------------------------
  def window_y
    config.custom_window_y
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウ幅の取得
  #--------------------------------------------------------------------------
  def window_width
    default_window_width_or(config.custom_window_width)
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウ高さの取得
  #--------------------------------------------------------------------------
  def window_height
    default_window_height_or(config.custom_window_height)
  end
  #--------------------------------------------------------------------------
  # ● 画像表示スプライトX座標の取得
  #--------------------------------------------------------------------------
  def view_sprite_x
    config.custom_picture_x ? config.custom_picture_x : self.x + self.width
  end
  #--------------------------------------------------------------------------
  # ● 画像表示スプライトY座標の取得
  #--------------------------------------------------------------------------
  def view_sprite_y
    config.custom_picture_y ? config.custom_picture_y : self.y
  end
  #--------------------------------------------------------------------------
  # ● ヘルプウィンドウ幅の取得
  #--------------------------------------------------------------------------
  def help_window_width
    config.custom_help_width ? config.custom_help_width : Graphics.width - self.width
  end
  #--------------------------------------------------------------------------
  # ● ヘルプウィンドウ高さの取得
  #--------------------------------------------------------------------------
  def help_window_height
    config.custom_help_height
  end
  #--------------------------------------------------------------------------
  # ● ヘルプウィンドウX座標の取得
  #--------------------------------------------------------------------------
  def help_window_x
    config.custom_help_x ? config.custom_help_x : self.x + self.width
  end
  #--------------------------------------------------------------------------
  # ● ヘルプウィンドウY座標の取得
  #--------------------------------------------------------------------------
  def help_window_y
     config.custom_help_y ? config.custom_help_y : self.y + self.height - @auto_help_window.height
  end
  #--------------------------------------------------------------------------
  # ● ページの取得
  #--------------------------------------------------------------------------
  def get_page(name)
    Ahriman::ViewerManager.custom_page(name)
  end
  #--------------------------------------------------------------------------
  # ● カテゴリーページ
  #--------------------------------------------------------------------------
  def page
    get_page(@page_name)
  end
  #--------------------------------------------------------------------------
  # ● カテゴリー選択状態
  #--------------------------------------------------------------------------
  def selection
    get_selection(@page_name)
  end
  #--------------------------------------------------------------------------
  # ● 解放
  #--------------------------------------------------------------------------
  def dispose
    super
    dispose_view_sprite
    dispose_help_window
  end
  #--------------------------------------------------------------------------
  # ● 処理の開始
  #--------------------------------------------------------------------------
  def start
    setup_viewer
    super
  end
  #--------------------------------------------------------------------------
  # ● フレーム更新
  #--------------------------------------------------------------------------
  def update
    super
    start if !@started && $game_message.viewer_custom?
    update_help_window
    update_view_sprite
  end
  #--------------------------------------------------------------------------
  # ● 決定音の再生
  #--------------------------------------------------------------------------
  def play_ok
    current_item { |i| i.play; i.play_enabled? }
    Sound.play_ok
  end
  #--------------------------------------------------------------------------
  # ● ブザー音の再生
  #--------------------------------------------------------------------------
  def play_buzzer
    Sound.play_buzzer
  end
  #--------------------------------------------------------------------------
  # ● 決定時の処理
  #--------------------------------------------------------------------------
  def on_ok
    result = current_item { |i| i.variable_value } || 0
    $game_variables[$game_message.viewer_custom_variable_id] = result
    terminate_viewer
  end
  #--------------------------------------------------------------------------
  # ● キャンセル時の処理
  #--------------------------------------------------------------------------
  def on_cancel
    $game_variables[$game_message.viewer_custom_variable_id] = 0
    terminate_viewer
  end
  #--------------------------------------------------------------------------
  # ● 選択項目の有効状態を取得
  #--------------------------------------------------------------------------
  def current_item_enabled?
    return current_item { |i| i.variable_value } != nil
  end
  #--------------------------------------------------------------------------
  # ● ビューアーのセットアップ
  #--------------------------------------------------------------------------
  def setup_viewer
    @started = true
    @page_name = $game_message.viewer_custom_page_name
    @descriptions = page.items.map{ |i| i.description_name ? Ahriman::ViewerManager.load_txt(i.description_name) : nil }
    @auto_help_window.text_proc = Proc.new{ current_item { @descriptions[index] } }
    create_view_sprite
  end
  #--------------------------------------------------------------------------
  # ● ビューアーの終了
  #--------------------------------------------------------------------------
  def terminate_viewer
    @started = false
    $game_message.clear
    @auto_help_window.text_proc = Proc.new{}
    dispose_view_sprite
  end
  #--------------------------------------------------------------------------
  # ● ヘルプウィンドウの作成
  #--------------------------------------------------------------------------
  def create_help_window
    @auto_help_window = Ahriman::Window_AutoHelp.new(help_window_width, help_window_height)
  end
  #--------------------------------------------------------------------------
  # ● ヘルプウィンドウの解放
  #--------------------------------------------------------------------------
  def dispose_help_window
    @auto_help_window.dispose
  end
  #--------------------------------------------------------------------------
  # ● ヘルプウィンドウの更新
  #--------------------------------------------------------------------------
  def update_help_window
    @auto_help_window.update
    @auto_help_window.x = help_window_x
    @auto_help_window.y = help_window_y
  end
  #--------------------------------------------------------------------------
  # ● 画像表示スプライトの作成
  #--------------------------------------------------------------------------
  def create_view_sprite
    @view_sprite = Sprite.new(@viewport)
    @view_bitmaps = {}
  end
  #--------------------------------------------------------------------------
  # ● 画像表示スプライトの解放
  #--------------------------------------------------------------------------
  def dispose_view_sprite
    return unless @view_sprite
    @view_bitmaps.each_value { |b| b.dispose }
    @view_sprite.dispose
    @view_sprite = nil
  end
  #--------------------------------------------------------------------------
  # ● 画像表示スプライトの更新
  #--------------------------------------------------------------------------
  def update_view_sprite
    return unless @view_sprite
    item = current_item
    if item && item.picture_name != nil
      @view_sprite.x = view_sprite_x
      @view_sprite.y = view_sprite_y
      @view_bitmaps[item.picture_name] = @view_sprite.bitmap = Cache.picture(item.picture_name)
      @view_sprite.visible = true
    else
      @view_sprite.visible = false
    end
  end
end


#==============================================================================
# ■ Ahriman::Window_AutoHelp
#------------------------------------------------------------------------------
# 　自動的に更新される説明や情報を表示するウィンドウです。
#==============================================================================

class Ahriman::Window_AutoHelp < Window_Base
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :text_proc                # 表示テキスト用コールバック
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize(width, height = nil)
    super(0, 0, width, height || fitting_height(1))
    self.openness = 0
    deactivate
    @static_height = height
    @text_proc = Proc.new {}
    @text = nil
    @fiber = nil
  end
  #--------------------------------------------------------------------------
  # ● フレーム更新
  #--------------------------------------------------------------------------
  def update
    super
    update_message
  end
  #--------------------------------------------------------------------------
  # ● メッセージの更新
  #--------------------------------------------------------------------------
  def update_message
    if @fiber
      @fiber.resume
    elsif @text and not @text.empty?
      @fiber = Fiber.new { fiber_main }
      @fiber.resume
    else
      update_text
    end
  end
  #--------------------------------------------------------------------------
  # ● ファイバーのメイン処理
  #--------------------------------------------------------------------------
  def fiber_main
    text = @text
    refresh
    open_and_wait
    loop do
      update_text
      break unless @text
      if text != @text
        text = @text
        close_and_wait unless @static_height
        refresh
        open_and_wait unless @static_height
      else
        Fiber.yield
      end
    end
    close_and_wait
    @fiber = nil
  end
  #--------------------------------------------------------------------------
  # ● テキストの更新
  #--------------------------------------------------------------------------
  def update_text
    @text = @text_proc.call
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウを開き、完全に開くまで待つ
  #--------------------------------------------------------------------------
  def open_and_wait
    open
    Fiber.yield until open?
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウを閉じ、完全に閉じるまで待つ
  #--------------------------------------------------------------------------
  def close_and_wait
    close
    Fiber.yield until close?
  end
  #--------------------------------------------------------------------------
  # ● リフレッシュ
  #--------------------------------------------------------------------------
  def refresh
    if @text and not @text.empty?
      unless @static_height
        l = @text.scan(/^/).size
        self.height = fitting_height(l)
        create_contents
      else
        contents.clear
      end
      draw_text_ex(0, 0, @text)
    else
      contents.clear
    end
  end
end


#==============================================================================
# ■ Ahriman::Window_Tooltip
#------------------------------------------------------------------------------
# 　ツールチップを表示するウィンドウです。
#==============================================================================

class Ahriman::Window_Tooltip < Window_Base
  #--------------------------------------------------------------------------
  # ● 公開インスタンス変数
  #--------------------------------------------------------------------------
  attr_accessor :text_proc                # 表示テキスト用コールバック
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize(width)
    super(0, 0, width, fitting_height(1))
    self.opacity = 0
    self.contents_opacity = 0
    @text_proc = Proc.new {}
    @show_count = 0
  end
  #--------------------------------------------------------------------------
  # ● フレーム更新
  #--------------------------------------------------------------------------
  def update
    super
    if @show_count > 0
      update_fadein
      @show_count -= 1
    else
      update_fadeout
    end
  end
  #--------------------------------------------------------------------------
  # ● フェードインの更新
  #--------------------------------------------------------------------------
  def update_fadein
    self.contents_opacity += 16
  end
  #--------------------------------------------------------------------------
  # ● フェードアウトの更新
  #--------------------------------------------------------------------------
  def update_fadeout
    self.contents_opacity -= 16
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウを開く
  #--------------------------------------------------------------------------
  def open
    refresh
    @show_count = 150
    self.contents_opacity = 0
    self
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウを閉じる
  #--------------------------------------------------------------------------
  def close
    @show_count = 0
    self
  end
  #--------------------------------------------------------------------------
  # ● リフレッシュ
  #--------------------------------------------------------------------------
  def refresh
    text = @text_proc.call
    if text and not text.empty?
      l = text.scan(/^/).size
      self.height = fitting_height(l)
      create_contents
      draw_background(contents.rect)
      draw_text_ex(0, 0, text)
    else
      contents.clear
    end
  end
  #--------------------------------------------------------------------------
  # ● 背景の描画
  #--------------------------------------------------------------------------
  def draw_background(rect)
    temp_rect = rect.clone
    temp_rect.width /= 2
    contents.gradient_fill_rect(temp_rect, back_color2, back_color1)
    temp_rect.x = temp_rect.width
    contents.gradient_fill_rect(temp_rect, back_color1, back_color2)
  end
  #--------------------------------------------------------------------------
  # ● 背景色 1 の取得
  #--------------------------------------------------------------------------
  def back_color1
    Color.new(0, 0, 0, 192)
  end
  #--------------------------------------------------------------------------
  # ● 背景色 2 の取得
  #--------------------------------------------------------------------------
  def back_color2
    Color.new(0, 0, 0, 0)
  end
end


#==============================================================================
# ■ Scene_Base
#------------------------------------------------------------------------------
# 　ゲーム中の全てのシーンのスーパークラスです。
#==============================================================================

class Scene_Base
  #--------------------------------------------------------------------------
  # ● override : フレーム更新（基本）
  #--------------------------------------------------------------------------
  alias :_ahriman__update_basic :update_basic
  def update_basic
    Ahriman::VoiceController.update
    _ahriman__update_basic
  end
end


#==============================================================================
# ■ Scene_Title
#------------------------------------------------------------------------------
# 　タイトル画面の処理を行うクラスです。
#==============================================================================

class Scene_Title < Scene_Base
  #--------------------------------------------------------------------------
  # ● override : 開始処理
  #--------------------------------------------------------------------------
  alias :_ahriman__start :start
  def start
    RPG::SE.voice_stop
    _ahriman__start
    start_cheat_command unless Ahriman.trial?
  end
  #--------------------------------------------------------------------------
  # ● フレーム更新
  #--------------------------------------------------------------------------
  def update
    super
    update_cheat_command unless Ahriman.trial?
  end
  #--------------------------------------------------------------------------
  # ● override : コマンドウィンドウの作成
  #--------------------------------------------------------------------------
  alias :_ahriman__create_command_window :create_command_window
  def create_command_window
    _ahriman__create_command_window
    @command_window.set_handler(:secret_game, method(:command_secret_game))
  end
  #--------------------------------------------------------------------------
  # ● add : チートコマンドの開始
  #--------------------------------------------------------------------------
  def start_cheat_command
    @cheat_command_count = 0
    @cheat_command_push_count = 0
  end
  #--------------------------------------------------------------------------
  # ● add : チートコマンドの入力回数
  #--------------------------------------------------------------------------
  def cheat_command_push_max
    5
  end
  #--------------------------------------------------------------------------
  # ● add : チートコマンドのセーフフレーム
  #--------------------------------------------------------------------------
  def cheat_command_safe_frame
    15
  end
  #--------------------------------------------------------------------------
  # ● add : チートコマンドの入力中を判定
  #--------------------------------------------------------------------------
  def cheat_command_pushing?
    @cheat_command_push_count < cheat_command_push_max and not @command_window.secret_game_showed?
  end
  #--------------------------------------------------------------------------
  # ● add : チートコマンドの完了処理
  #--------------------------------------------------------------------------
  def finish_cheat_command
    Sound.play_ok
    close_command_window
    Sound.cheat_finish
    @command_window.cheat_enabled = true
    @command_window.refresh
    @command_window.select_symbol(:secret_game)
    @command_window.top_row = 1
    @command_window.open
  end
  #--------------------------------------------------------------------------
  # ● add : チートコマンドの更新
  #--------------------------------------------------------------------------
  def update_cheat_command
    if cheat_command_pushing?
      if @cheat_command_count > 0
        @cheat_command_count -= 1
        @cheat_command_push_count = 0 if @cheat_command_count == 0
      end
      if Input.repeat?(:B)
        @cheat_command_push_count += 1
        @cheat_command_count = cheat_command_safe_frame
        finish_cheat_command if @cheat_command_push_count == cheat_command_push_max
      end
    end
  end
  #--------------------------------------------------------------------------
  # ● add : コマンド［秘密の部屋］
  #--------------------------------------------------------------------------
  def command_secret_game
    DataManager.setup_secret_game
    close_command_window
    fadeout_all
    $game_map.autoplay
    SceneManager.goto(Scene_Map)
  end
end


#==============================================================================
# ■ Scene_Menu
#------------------------------------------------------------------------------
# 　メニュー画面の処理を行うクラスです。
#==============================================================================

class Scene_Menu < Scene_MenuBase
  #--------------------------------------------------------------------------
  # ● override : コマンドウィンドウの作成
  #--------------------------------------------------------------------------
  alias :_ahriman__create_command_window :create_command_window
  def create_command_window
    _ahriman__create_command_window
    @command_window.set_handler(:viewer,    method(:command_viewer))
  end
  #--------------------------------------------------------------------------
  # ● add  : コマンド［ビューアー］
  #--------------------------------------------------------------------------
  def command_viewer
    SceneManager.call(Ahriman::Scene_Viewer)
  end
end


#==============================================================================
# ■ Scene_Map
#------------------------------------------------------------------------------
# 　マップ画面の処理を行うクラスです。
#==============================================================================

class Scene_Map < Scene_Base
  #--------------------------------------------------------------------------
  # ● override : トランジション実行
  #    戦闘後やロード直後など、画面が暗転しているときはフェードインを行う。
  #--------------------------------------------------------------------------
  alias :_ahriman__perform_transition :perform_transition
  def perform_transition
    if Graphics.brightness == 0 and $game_map.screen.brightness == 0
      Graphics.transition(0)
    else
      _ahriman__perform_transition
    end
  end
  #--------------------------------------------------------------------------
  # ● override : 全ウィンドウの作成
  #--------------------------------------------------------------------------
  alias :_ahriman__create_all_windows :create_all_windows
  def create_all_windows
    _ahriman__create_all_windows
    create_viewer_custom_window
  end
  #--------------------------------------------------------------------------
  # ● ビューアーカスタムウィンドウの作成
  #--------------------------------------------------------------------------
  def create_viewer_custom_window
    @viewer_custom_window = Ahriman::Window_ViewerCustom.new
  end
  #--------------------------------------------------------------------------
  # ● override : メニュー画面の呼び出し
  #--------------------------------------------------------------------------
  alias :_ahriman__call_menu :call_menu
  def call_menu
    if Ahriman.secret_game?
      # シークレットゲーム中はメニューを開かずビューアーを開く
      Sound.play_ok
      SceneManager.call(Ahriman::Scene_Viewer)
    else
      _ahriman__call_menu
    end
  end
end


#==============================================================================
# ■ Scene_Battle
#------------------------------------------------------------------------------
# 　バトル画面の処理を行うクラスです。
#==============================================================================

class Scene_Battle < Scene_Base
  #--------------------------------------------------------------------------
  # ● override : 終了処理
  #--------------------------------------------------------------------------
  alias :_ahriman__terminate :terminate
  def terminate
    if $game_temp.after_battle_fadeout
      $game_map.screen.start_fadeout(1)
      $game_map.screen.update_fadeout
      $game_temp.after_battle_fadeout = false
    end
    _ahriman__terminate
  end
  #--------------------------------------------------------------------------
  # ● new : スキル／アイテムの発動
  #   ※「拡張反撃」セクションへの再定義パッチ
  #     →１行目をコメントアウト
  #--------------------------------------------------------------------------
  alias :_ahriman__invoke_item :invoke_item
  def invoke_item(target, item)
#~     return unless @subject.movable? #行動主体者が行動不能になった場合は行動しない。
    @main_cnt_user = target #攻撃を受けた者を記録。
    @counter_done = false #反撃済みフラグをリセット。
    if rand < target.item_cnt(@subject, item) && !(/<cnt_cansel>/ =~ item.note) #反撃
      invoke_counter_attack(target, item)
    elsif rand < target.item_mrf(@subject, item) && !(/<cnt_cansel>/ =~ item.note)  #魔法反射
      invoke_magic_reflection(target, item) #魔法反射
    else
      cnt_states_search(target, item , false) #通常タイミングの反撃。
      cnt_by_party(target, item , false)
      unless @counter_done #反撃済みなら以下を飛ばす。
        apply_item_effects(apply_substitute(target, item), item) #通常処理。
        cnt_states_search(target, item , true)#被ダメージ反撃。
        cnt_by_party(target, item , true)
      end
    end
    @subject.last_target_index = target.index
  end
  #--------------------------------------------------------------------------
  # ● new : 反撃の発動（スキル反撃）　また、反撃に反撃しない。
  #   ※「拡張反撃」セクションへの再定義パッチ
  #     →反撃処理の不具合を修正
  #--------------------------------------------------------------------------
  alias :_ahriman__invoke_counter_skill :invoke_counter_skill
  def invoke_counter_skill(cnt_user, item , note)
    #反撃条件調査
    str1 = note.scan(/<cnt_basic;(\d+);(\d+)>/)
    return false if str1 == []
    return false if /<cnt_cansel>/ =~ item.note #反撃無効
    return false unless rand(100) < str1[0][1].to_i #反撃率
    return unless cnt_roll(cnt_user, item , note) #反撃条件
    return unless @subject.current_action #バグ対策(攻撃主体がすでに戦闘不能)
    
    #カウンタースキル（実際に反撃で発動するスキル）の選定
    if /<cnt_copy>/ =~ note #コピー反撃
      skill = @subject.current_action.item #相手が使ってきたスキル・アイテム
      copy_pre_skill = Marshal.load(Marshal.dump($data_skills[Tamura_Cnt::SKILL_COPY_ID])) #元のデータ保持
      $data_skills[Tamura_Cnt::SKILL_COPY_ID] = Marshal.load(Marshal.dump(skill)) #データ書き換え
      attack_skill = $data_skills[Tamura_Cnt::SKILL_COPY_ID]
    else
      attack_skill = $data_skills[str1[0][0].to_i]
    end
    
    #カウンタースキルが5番のとき、反撃実行者のＨＰが半分以上ある時は発動しない
    #if attack_skill.id == 5
    # return false if cnt_user.hp > ( cnt_user.mhp / 2 )
    #end
    
    #カウンタースキルが5番のとき、反撃者がステート２、３，４番のどれもでもない時は発動しない
    #if attack_skill.id == 5
    # states_id = []
    # cnt_user.states.each do |state| states_id.push state.id end
    # return false if states_id & [2,3,4] == []
    #end
    
    #カウンタースキルが70番のとき、攻撃を受けた者がアクター２番でない時は発動しない
    #if attack_skill.id == 70
    #  return false if @main_cnt_user != $game_actors[2]
    #end
    

    #カウンタースキルが146番のとき、現在行動者のスキルが回復スキル以外だと発動しない
    #if attack_skill.id == 146
    #  skill = @subject.current_action.item
    #  if skill.is_a?(RPG::Skill)
    #    return false unless skill.damage.recover?
    #  else
    #    return false
    #  end
    #end
    
    
    #カウンタースキルが148番のとき、現在行動者がアイテムを使ったとき以外だと発動しない
    #if attack_skill.id == 148
    # skill = @subject.current_action.item
    #  return false unless skill.is_a?(RPG::Item)
    #end

    
    #反撃の処理・ＸＰスタイルバトル使用の時。
    @log_window.display_use_item(cnt_user, attack_skill)
    @log_window.popup_data.popup_text(cnt_user, :counter) if Tamura_Cnt::XP_STYLE_BATTLE
    @log_window.popup_data.add_wait if Tamura_Cnt::XP_STYLE_BATTLE
    
    #反撃の処理
    refresh_status
    counter_action = Game_Action.new(cnt_user)
    counter_action.set_skill(attack_skill.id)
    targets = cnt_target(cnt_user, attack_skill , note , counter_action)

    #ターゲット全滅の時は、それ以上実行しない。
    targets = cnt_target(cnt_user, attack_skill , note , counter_action)
    return if targets.select {|member| member.alive? } == []
    
    #反撃の処理
    show_animation_cnt(targets, attack_skill.animation_id , cnt_user)
    targets.each {|target| attack_skill.repeats.times { 
        apply_item_effects_user(apply_substitute(target, attack_skill),
          attack_skill,cnt_user)
      } 
    }
    
    #カウンタースキルのコモンイベント
    #行動主体者が本来実行すべきコモンイベントを保存しておく。
    main_item_common = Marshal.load(Marshal.dump($game_temp.common_event_id))
    #カウンタースキルの特徴を調べてコモンイベントを実行する。
    attack_skill.effects.each {|effect|
      if effect.code == 44
        $game_temp.reserve_common_event(effect.data_id)
        wait_for_event
      end
    }
    #行動主体者のコモンイベントを実行する
    $game_temp.reserve_common_event(main_item_common) 
    
    @counter_done = true #反撃済みフラグＯＮ。
    
    #コピー反撃終了
    if /<cnt_copy>/ =~ note #コピー反撃で書き換えたデータをもとに戻す。
      $data_skills[Tamura_Cnt::SKILL_COPY_ID] = Marshal.load(Marshal.dump(copy_pre_skill))
    end
  end
end


#==============================================================================
# ■ Ahriman::Scene_Viewer
#------------------------------------------------------------------------------
# 　ビューアー画面の処理を行うクラスです。
#==============================================================================

class Ahriman::Scene_Viewer < Scene_MenuBase
  #--------------------------------------------------------------------------
  # ● 開始処理
  #--------------------------------------------------------------------------
  def start
    super
    create_spriteset
    create_category_window
    create_cutin_window
    create_cg_window
    create_bgm_window
    @spriteset.update
  end
  #--------------------------------------------------------------------------
  # ● 終了処理
  #--------------------------------------------------------------------------
  def terminate
    super
    RPG::SE.voice_stop
    replay_bgm
    dispose_spriteset
  end
  #--------------------------------------------------------------------------
  # ● フレーム更新
  #--------------------------------------------------------------------------
  def update
    super
    update_spriteset
  end
  #--------------------------------------------------------------------------
  # ● ビューアー構成
  #--------------------------------------------------------------------------
  def config
    Ahriman::ViewerManager.config
  end
  #--------------------------------------------------------------------------
  # ● CGヘルプテキスト
  #--------------------------------------------------------------------------
  def cg_help_text
    Ahriman::ViewerManager.cg_help_text
  end
  #--------------------------------------------------------------------------
  # ● CGヘルプ横幅
  #--------------------------------------------------------------------------
  def cg_help_width
    config.cg_help_width || 140
  end
  #--------------------------------------------------------------------------
  # ● サブページ名
  #--------------------------------------------------------------------------
  def sub_page_name
    @category_window.current_page_name
  end
  #--------------------------------------------------------------------------
  # ● スプライトセットの作成
  #--------------------------------------------------------------------------
  def create_spriteset
    @spriteset = Ahriman::Spriteset_Viewer.new
  end
  #--------------------------------------------------------------------------
  # ● スプライトセットの解放
  #--------------------------------------------------------------------------
  def dispose_spriteset
    @spriteset.dispose
  end
  #--------------------------------------------------------------------------
  # ● スプライトセットのフレーム更新
  #--------------------------------------------------------------------------
  def update_spriteset
    @spriteset.update
  end
  #--------------------------------------------------------------------------
  # ● カテゴリーウィンドウの作成
  #--------------------------------------------------------------------------
  def create_category_window
    @category_window = Ahriman::Window_ViewerCategory.new
#~    @category_window.set_handler(:ok,       method(:on_category_ok))
    @category_window.set_handler(:cutin,    method(:start_cutin))
    @category_window.set_handler(:cg,       method(:start_cg))
    @category_window.set_handler(:bgm,      method(:start_bgm))
    @category_window.set_handler(:cancel,   method(:return_scene))
    view { @category_window.view_item }
  end
  #--------------------------------------------------------------------------
  # ● カットインウィンドウの作成
  #--------------------------------------------------------------------------
  def create_cutin_window
    @cutin_window = Ahriman::Window_ViewerCutin.new
    @cutin_window.page_name_proc = method(:sub_page_name)
    @cutin_window.set_handler(:cancel,  method(:finish_cutin))
    @spriteset.cutin_basic_x = @cutin_window.x + @cutin_window.width
  end
  #--------------------------------------------------------------------------
  # ● CGウィンドウの作成
  #--------------------------------------------------------------------------
  def create_cg_window
    @cg_window = Ahriman::Window_ViewerCG.new
    @cg_window.page_name_proc = method(:sub_page_name)
    @cg_window.set_handler(:cancel,  method(:finish_cg))
    @cg_help_window = Ahriman::Window_Tooltip.new(cg_help_width)
    @cg_help_window.text_proc = method(:cg_help_text)
  end
  #--------------------------------------------------------------------------
  # ● BGMウィンドウの作成
  #--------------------------------------------------------------------------
  def create_bgm_window
    @bgm_window = Ahriman::Window_ViewerBGM.new
    @bgm_window.page_name_proc = method(:sub_page_name)
    @bgm_window.pre_bgm_proc   = method(:save_bgm)
    @bgm_window.set_handler(:cancel,  method(:finish_bgm))
  end
  #--------------------------------------------------------------------------
  # ● カテゴリー［リスタート］
  #--------------------------------------------------------------------------
  def restart_category
    @category_window.start
    view { @category_window.view_item }
  end
  #--------------------------------------------------------------------------
  # ● カットイン［開始］
  #--------------------------------------------------------------------------
  def start_cutin
    @cutin_window.start
    view { @cutin_window.current_item }
  end
  #--------------------------------------------------------------------------
  # ● カットイン［終了］
  #--------------------------------------------------------------------------
  def finish_cutin
    RPG::SE.voice_stop
    restart_category
  end
  #--------------------------------------------------------------------------
  # ● CG［開始］
  #--------------------------------------------------------------------------
  def start_cg
    @cg_window.start
    @cg_help_window.open
    view { @cg_window.current_item }
  end
  #--------------------------------------------------------------------------
  # ● CG［終了］
  #--------------------------------------------------------------------------
  def finish_cg
    RPG::SE.voice_stop
    @cg_help_window.close
    restart_category
  end
  #--------------------------------------------------------------------------
  # ● BGM［開始］
  #--------------------------------------------------------------------------
  def start_bgm
    @bgm_window.start
    view { @bgm_window.current_item }
  end
  #--------------------------------------------------------------------------
  # ● BGM［終了］
  #--------------------------------------------------------------------------
  def finish_bgm
    restart_category
  end
  #--------------------------------------------------------------------------
  # ● 表示アイテムの設定
  #--------------------------------------------------------------------------
  def view(&block)
    @spriteset.item_proc = block
  end
  #--------------------------------------------------------------------------
  # ● BGM の保存
  #--------------------------------------------------------------------------
  def save_bgm
    @saved_bgm = RPG::BGM.last unless @saved_bgm
  end
  #--------------------------------------------------------------------------
  # ● BGM の再開
  #--------------------------------------------------------------------------
  def replay_bgm
    @saved_bgm.replay if @saved_bgm
  end
end
